{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/followers/index.jsx"],"names":["RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","Followers","ImmutablePureComponent","constructor","arguments","_defineProperty","_debounce","this","props","dispatch","expandFollowers","accountId","leading","c","column","scrollTop","_load","isAccount","fetchAccount","fetchFollowers","componentDidMount","params","acct","lookupAccount","componentDidUpdate","prevProps","render","accountIds","hasMore","multiColumn","isLoading","suspended","hidden","remote","remoteUrl","hideCollections","BundleColumnError","errorType","Column","LoadingIndicator","emptyMessage","forceEmptyState","LimitedAccountHint","isEmpty","remoteMessage","_jsxs","ref","setRef","children","ProfileColumnHeader","onClick","handleHeaderClick","ScrollableList","scrollKey","onLoadMore","handleLoadMore","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","bindToDocument","map","AccountContainer","withNote","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","_ref","getIn","normalizeForLookup","getAccountHidden"],"mappings":"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","file":"js/flavours/glitch/async/followers.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport { TimelineHint } from 'flavours/glitch/components/timeline_hint';\nimport BundleColumnError from 'flavours/glitch/features/ui/components/bundle_column_error';\nimport { normalizeForLookup } from 'flavours/glitch/reducers/accounts_map';\nimport { getAccountHidden } from 'flavours/glitch/selectors';\n\nimport {\n  lookupAccount,\n  fetchAccount,\n  fetchFollowers,\n  expandFollowers,\n} from '../../actions/accounts';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport AccountContainer from '../../containers/account_container';\nimport ProfileColumnHeader from '../account/components/profile_column_header';\nimport { LimitedAccountHint } from '../account_timeline/components/limited_account_hint';\nimport HeaderContainer from '../account_timeline/containers/header_container';\nimport Column from '../ui/components/column';\n\nconst mapStateToProps = (state, { params: { acct, id } }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'followers', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'followers', accountId, 'next']),\n    isLoading: state.getIn(['user_lists', 'followers', accountId, 'isLoading'], true),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hideCollections: state.getIn(['accounts', accountId, 'hide_collections'], false),\n    hidden: getAccountHidden(state, accountId),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.followers' defaultMessage='Followers' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nclass Followers extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, isAccount, dispatch } = this.props;\n\n    if (!isAccount) dispatch(fetchAccount(accountId));\n    dispatch(fetchFollowers(accountId));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowers(this.props.accountId));\n  }, 300, { leading: true });\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  render () {\n    const { accountId, accountIds, hasMore, isAccount, multiColumn, isLoading, suspended, hidden, remote, remoteUrl, hideCollections } = this.props;\n\n    if (!isAccount) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (hideCollections && accountIds.isEmpty()) {\n      emptyMessage = <FormattedMessage id='empty_column.account_hides_collections' defaultMessage='This user has chosen to not make this information available' />;\n    } else if (remote && accountIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='account.followers.empty' defaultMessage='No one follows this user yet.' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column ref={this.setRef}>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} multiColumn={multiColumn} />\n\n        <ScrollableList\n          scrollKey='followers'\n          hasMore={!forceEmptyState && hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs />}\n          alwaysPrepend\n          append={remoteMessage}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Followers);\n"],"sourceRoot":""}