{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/components/notification_purge_buttons.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/containers/notification_purge_buttons_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/filtered_notifications_banner.tsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/notifications_permission_banner.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/checkbox_with_label.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/clear_column_button.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/grant_permission_button.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/pill_bar_button.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/column_settings.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/containers/column_settings_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/filter_bar.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/containers/filter_bar_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/index.jsx"],"names":["messages","defineMessages","btnAll","id","defaultMessage","btnNone","btnInvert","btnApply","NotificationPurgeButtons","ImmutablePureComponent","render","intl","markNewForDelete","this","props","_jsx","className","onClick","onMarkAll","classNames","active","formatMessage","onMarkNone","onInvert","onDeleteMarked","Icon","icon","DeleteIcon","_defineProperty","PropTypes","func","isRequired","object","bool","injectIntl","clearMessage","clearConfirm","connect","state","getIn","mapDispatchToProps","dispatch","_ref","onEnterCleaningMode","yes","enterNotificationClearingMode","openModal","modalType","modalProps","message","confirm","onConfirm","deleteMarkedNotifications","markAllNotifications","FilteredNotificationsBanner","useAppDispatch","policy","useAppSelector","notificationPolicy","useEffect","fetchNotificationPolicy","interval","setInterval","clearInterval","summary","pending_notifications_count","Link","to","InventoryIcon","FormattedMessage","values","count","pending_requests_count","toCappedNumber","close","NotificationsPermissionBanner","PureComponent","constructor","arguments","requestBrowserPermission","changeSetting","IconButton","iconComponent","CloseIcon","handleClose","title","SettingsIcon","Button","handleClick","CheckboxWithLabel","checked","disabled","children","onChange","handleChange","useCallback","_ref2","target","Toggle","ClearColumnButton","tabIndex","DeleteForeverIcon","GrantPermissionButton","PillBarButton","settings","settingPath","prefix","label","filter","Boolean","join","ColumnSettings","path","onChangePolicy","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","unreadMarkersShowStr","filterBarShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","get","pushStr","filter_not_following","handleFilterNotFollowing","filter_not_followers","handleFilterNotFollowers","days","filter_new_accounts","handleFilterNewAccounts","filter_private_mentions","handleFilterPrivateMentions","role","SettingToggle","onPushChange","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","withIdentity","permissionDenied","includes","window","Notification","permission","changePushNotifications","slice","showAlert","setFilter","clearNotifications","param","updateNotificationsPolicy","tooltips","mentions","favourites","reactions","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","ReplyAllIcon","StarIcon","MoodIcon","RepeatIcon","InsertChartIcon","HomeIcon","PersonAddIcon","newActiveFilter","enterNotifCleaning","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","animatingNCD","maxId","expandNotifications","_debounce","last","leading","loadPending","scrollTopNotifications","columnId","removeColumn","addColumn","dir","moveColumn","column","scrollTop","c","elementIndex","findIndex","_selectChild","setState","notifCleaningActive","markNotificationsAsRead","submitMarkers","immediate","componentDidMount","mountNotifications","componentWillUnmount","handleLoadOlder","cancel","handleScrollToTop","handleScroll","unmountNotifications","index","align_top","container","node","element","querySelector","concat","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","isLoading","isUnread","multiColumn","hasMore","numPending","lastReadId","canMarkAsRead","needsNotificationPermission","pinned","emptyMessage","signedIn","scrollableContent","filterBarContainer","FilterBarContainer","scrollContainer","size","map","LoadGap","handleLoadGap","NotificationContainer","notification","accountId","onMoveUp","handleMoveUp","onMoveDown","handleMoveDown","unread","compareId","ScrollableList","scrollKey","trackScroll","showLoading","prepend","alwaysPrepend","onLoadMore","onLoadPending","handleLoadPending","onScrollToTop","onScroll","bindToDocument","NotSignedInIndicator","extraButtons","push","handleMarkAsRead","DoneAllIcon","notifCleaningButtonClassName","notifCleaningDrawerClassName","msgEnterNotifCleaning","notifCleaningDrawer","onTransitionEnd","handleTransitionEndNCD","NotificationPurgeButtonsContainer","_jsxs","Column","ref","setColumnRef","extraClasses","ColumnHeader","NotificationsIcon","onPin","handlePin","onMove","handleMove","handleHeaderClick","localSettings","extraButton","appendContent","ColumnSettingsContainer","Helmet","name","content","some"],"mappings":"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","file":"js/flavours/glitch/async/notifications.js","sourcesContent":["/**\n * Buttons widget for controlling the notification clearing mode.\n * In idle state, the cleaning mode button is shown. When the mode is active,\n * a Confirm and Abort buttons are shown in its place.\n */\n\nimport PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport DeleteIcon from '@/material-icons/400-24px/delete.svg?react';\nimport { Icon } from 'flavours/glitch/components/icon';\n\n\nconst messages = defineMessages({\n  btnAll : { id: 'notification_purge.btn_all', defaultMessage: 'Select\\nall' },\n  btnNone : { id: 'notification_purge.btn_none', defaultMessage: 'Select\\nnone' },\n  btnInvert : { id: 'notification_purge.btn_invert', defaultMessage: 'Invert\\nselection' },\n  btnApply : { id: 'notification_purge.btn_apply', defaultMessage: 'Clear\\nselected' },\n});\n\nclass NotificationPurgeButtons extends ImmutablePureComponent {\n\n  static propTypes = {\n    onDeleteMarked : PropTypes.func.isRequired,\n    onMarkAll : PropTypes.func.isRequired,\n    onMarkNone : PropTypes.func.isRequired,\n    onInvert : PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    markNewForDelete: PropTypes.bool,\n  };\n\n  render () {\n    const { intl, markNewForDelete } = this.props;\n\n    //className='active'\n    return (\n      <div className='column-header__notif-cleaning-buttons'>\n        <button onClick={this.props.onMarkAll} className={classNames('column-header__button', { active: markNewForDelete })}>\n          <b>∀</b><br />{intl.formatMessage(messages.btnAll)}\n        </button>\n\n        <button onClick={this.props.onMarkNone} className={classNames('column-header__button', { active: !markNewForDelete })}>\n          <b>∅</b><br />{intl.formatMessage(messages.btnNone)}\n        </button>\n\n        <button onClick={this.props.onInvert} className='column-header__button'>\n          <b>¬</b><br />{intl.formatMessage(messages.btnInvert)}\n        </button>\n\n        <button onClick={this.props.onDeleteMarked} className='column-header__button'>\n          <Icon id='trash' icon={DeleteIcon} /><br />{intl.formatMessage(messages.btnApply)}\n        </button>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(NotificationPurgeButtons);\n","//  Package imports.\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\n//  Our imports.\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport {\n  deleteMarkedNotifications,\n  enterNotificationClearingMode,\n  markAllNotifications,\n} from 'flavours/glitch/actions/notifications';\nimport NotificationPurgeButtons from 'flavours/glitch/components/notification_purge_buttons';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.marked_clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all selected notifications?' },\n  clearConfirm: { id: 'notifications.marked_clear', defaultMessage: 'Clear selected notifications' },\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n\n  onDeleteMarked() {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.clearMessage),\n        confirm: intl.formatMessage(messages.clearConfirm),\n        onConfirm: () => dispatch(deleteMarkedNotifications()),\n      },\n    }));\n  },\n\n  onMarkAll() {\n    dispatch(markAllNotifications(true));\n  },\n\n  onMarkNone() {\n    dispatch(markAllNotifications(false));\n  },\n\n  onInvert() {\n    dispatch(markAllNotifications(null));\n  },\n});\n\nconst mapStateToProps = state => ({\n  markNewForDelete: state.getIn(['notifications', 'markNewForDelete']),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(NotificationPurgeButtons));\n","import { useEffect } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport InventoryIcon from '@/material-icons/400-24px/inventory_2.svg?react';\nimport { fetchNotificationPolicy } from 'flavours/glitch/actions/notification_policies';\nimport { Icon } from 'flavours/glitch/components/icon';\nimport { useAppSelector, useAppDispatch } from 'flavours/glitch/store';\nimport { toCappedNumber } from 'flavours/glitch/utils/numbers';\n\nexport const FilteredNotificationsBanner: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const policy = useAppSelector((state) => state.notificationPolicy);\n\n  useEffect(() => {\n    void dispatch(fetchNotificationPolicy());\n\n    const interval = setInterval(() => {\n      void dispatch(fetchNotificationPolicy());\n    }, 120000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n\n  if (policy === null || policy.summary.pending_notifications_count === 0) {\n    return null;\n  }\n\n  return (\n    <Link\n      className='filtered-notifications-banner'\n      to='/notifications/requests'\n    >\n      <Icon icon={InventoryIcon} id='filtered-notifications' />\n\n      <div className='filtered-notifications-banner__text'>\n        <strong>\n          <FormattedMessage\n            id='filtered_notifications_banner.title'\n            defaultMessage='Filtered notifications'\n          />\n        </strong>\n        <span>\n          <FormattedMessage\n            id='filtered_notifications_banner.pending_requests'\n            defaultMessage='Notifications from {count, plural, =0 {no one} one {one person} other {# people}} you may know'\n            values={{ count: policy.summary.pending_requests_count }}\n          />\n        </span>\n      </div>\n\n      <div className='filtered-notifications-banner__badge'>\n        <div className='filtered-notifications-banner__badge__badge'>\n          {toCappedNumber(policy.summary.pending_notifications_count)}\n        </div>\n        <FormattedMessage\n          id='filtered_notifications_banner.mentions'\n          defaultMessage='{count, plural, one {mention} other {mentions}}'\n          values={{ count: policy.summary.pending_notifications_count }}\n        />\n      </div>\n    </Link>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport SettingsIcon from '@/material-icons/400-20px/settings.svg?react';\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport { Button } from 'flavours/glitch/components/button';\nimport { Icon }  from 'flavours/glitch/components/icon';\nimport { IconButton } from 'flavours/glitch/components/icon_button';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nclass NotificationsPermissionBanner extends PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  };\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  };\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' iconComponent={CloseIcon} onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' icon={SettingsIcon} /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n\nexport default connect()(injectIntl(NotificationsPermissionBanner));\n","import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\n\nimport Toggle from 'react-toggle';\n\nexport const CheckboxWithLabel = ({ checked, disabled, children, onChange }) => {\n  const handleChange = useCallback(({ target }) => {\n    onChange(target.checked);\n  }, [onChange]);\n\n  return (\n    <label className='app-form__toggle'>\n      <div className='app-form__toggle__label'>\n        {children}\n      </div>\n\n      <div className='app-form__toggle__toggle'>\n        <div>\n          <Toggle checked={checked} onChange={handleChange} disabled={disabled} />\n        </div>\n      </div>\n    </label>\n  );\n};\n\nCheckboxWithLabel.propTypes = {\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  children: PropTypes.children,\n  onChange: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport DeleteForeverIcon from '@/material-icons/400-24px/delete_forever.svg?react';\nimport { Icon }  from 'flavours/glitch/components/icon';\n\nexport default class ClearColumnButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.props.onClick}><Icon id='eraser' icon={DeleteForeverIcon} /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex={0} onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport classNames from 'classnames';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nexport default class PillBarButton extends PureComponent {\n\n  static propTypes = {\n    prefix: PropTypes.string,\n    settings: ImmutablePropTypes.map.isRequired,\n    settingPath: PropTypes.array.isRequired,\n    label: PropTypes.node.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n  };\n\n  onChange = () => {\n    const { settings, settingPath } = this.props;\n    this.props.onChange(settingPath, !settings.getIn(settingPath));\n  };\n\n  render () {\n    const { prefix, settings, settingPath, label, disabled } = this.props;\n    const id = ['setting-pillbar-button', prefix, ...settingPath].filter(Boolean).join('-');\n    const active = settings.getIn(settingPath);\n\n    return (\n      <button\n        key={id}\n        id={id}\n        className={classNames('pillbar-button', { active })}\n        disabled={disabled}\n        onClick={this.onChange}\n        aria-pressed={active}\n      >\n        {label}\n      </button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { identityContextPropShape, withIdentity } from 'flavours/glitch/identity_context';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'flavours/glitch/permissions';\n\nimport { CheckboxWithLabel } from './checkbox_with_label';\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport PillBarButton from './pill_bar_button';\nimport SettingToggle from './setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n  static propTypes = {\n    identity: identityContextPropShape,\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n    notificationPolicy: PropTypes.object.isRequired,\n    onChangePolicy: PropTypes.func.isRequired,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  };\n\n  handleFilterNotFollowing = checked => {\n    this.props.onChangePolicy('filter_not_following', checked);\n  };\n\n  handleFilterNotFollowers = checked => {\n    this.props.onChangePolicy('filter_not_followers', checked);\n  };\n\n  handleFilterNewAccounts = checked => {\n    this.props.onChangePolicy('filter_new_accounts', checked);\n  };\n\n  handleFilterPrivateMentions = checked => {\n    this.props.onChangePolicy('filter_private_mentions', checked);\n  };\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission, notificationPolicy } = this.props;\n\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const filterBarShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show_bar' defaultMessage='Show filter bar' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div className='column-settings'>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n        )}\n\n        <section>\n          <ClearColumnButton onClick={onClear} />\n        </section>\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <section>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </section>\n        )}\n\n        <section>\n          <h3><FormattedMessage id='notifications.policy.title' defaultMessage='Filter out notifications from…' /></h3>\n\n          <div className='column-settings__row'>\n            <CheckboxWithLabel checked={notificationPolicy.filter_not_following} onChange={this.handleFilterNotFollowing}>\n              <strong><FormattedMessage id='notifications.policy.filter_not_following_title' defaultMessage=\"People you don't follow\" /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_not_following_hint' defaultMessage='Until you manually approve them' /></span>\n            </CheckboxWithLabel>\n\n            <CheckboxWithLabel checked={notificationPolicy.filter_not_followers} onChange={this.handleFilterNotFollowers}>\n              <strong><FormattedMessage id='notifications.policy.filter_not_followers_title' defaultMessage='People not following you' /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_not_followers_hint' defaultMessage='Including people who have been following you fewer than {days, plural, one {one day} other {# days}}' values={{ days: 3 }} /></span>\n            </CheckboxWithLabel>\n\n            <CheckboxWithLabel checked={notificationPolicy.filter_new_accounts} onChange={this.handleFilterNewAccounts}>\n              <strong><FormattedMessage id='notifications.policy.filter_new_accounts_title' defaultMessage='New accounts' /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_new_accounts.hint' defaultMessage='Created within the past {days, plural, one {one day} other {# days}}' values={{ days: 30 }} /></span>\n            </CheckboxWithLabel>\n\n            <CheckboxWithLabel checked={notificationPolicy.filter_private_mentions} onChange={this.handleFilterPrivateMentions}>\n              <strong><FormattedMessage id='notifications.policy.filter_private_mentions_title' defaultMessage='Unsolicited private mentions' /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_private_mentions_hint' defaultMessage=\"Filtered unless it's in reply to your own mention or if you follow the sender\" /></span>\n            </CheckboxWithLabel>\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-filter-bar'>\n          <h3 id='notifications-filter-bar'><FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-unread-markers'>\n          <h3 id='notifications-unread-markers'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-follow'>\n          <h3 id='notifications-follow'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-follow-request'>\n          <h3 id='notifications-follow-request'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-favourite'>\n          <h3 id='notifications-favourite'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favorites:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-reaction'>\n          <h3 id='notifications-reaction'><FormattedMessage id='notifications.column_settings.reaction' defaultMessage='Reactions:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reaction']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reaction']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'reaction']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'reaction']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-mention'>\n          <h3 id='notifications-mention'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-reblog'>\n          <h3 id='notifications-reblog'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-poll'>\n          <h3 id='notifications-poll'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-status'>\n          <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-update'>\n          <h3 id='notifications-update'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></h3>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        {((this.props.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <section role='group' aria-labelledby='notifications-admin-sign-up'>\n            <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></h3>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </section>\n        )}\n\n        {((this.props.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <section role='group' aria-labelledby='notifications-admin-report'>\n            <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></h3>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </section>\n        )}\n      </div>\n    );\n  }\n\n}\n\nexport default withIdentity(ColumnSettings);\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { showAlert } from '../../../actions/alerts';\nimport { openModal } from '../../../actions/modal';\nimport { updateNotificationsPolicy } from '../../../actions/notification_policies';\nimport { setFilter, clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\n/**\n * @param {import('flavours/glitch/store').RootState} state\n */\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n  notificationPolicy: state.notificationPolicy,\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.clearMessage),\n        confirm: intl.formatMessage(messages.clearConfirm),\n        onConfirm: () => dispatch(clearNotifications()),\n      },\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n  onChangePolicy (param, checked) {\n    dispatch(updateNotificationsPolicy({\n      [param]: checked,\n    }));\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport HomeIcon from '@/material-icons/400-24px/home-fill.svg?react';\nimport InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';\nimport MoodIcon from '@/material-icons/400-24px/mood.svg?react';\nimport PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';\nimport RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';\nimport ReplyAllIcon from '@/material-icons/400-24px/reply_all.svg?react';\nimport StarIcon from '@/material-icons/400-24px/star.svg?react';\nimport { Icon }  from 'flavours/glitch/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favorites' },\n  reactions: { id: 'notifications.filter.reactions', defaultMessage: 'Reactions' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nclass FilterBar extends PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' icon={ReplyAllIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' icon={StarIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'reaction' ? 'active' : ''}\n          onClick={this.onClick('reaction')}\n          title={intl.formatMessage(tooltips.reactions)}\n        >\n          <Icon id='mood' icon={MoodIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' icon={RepeatIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' icon={InsertChartIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' icon={HomeIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' icon={PersonAddIcon} />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n\nexport default injectIntl(FilterBar);\n","import { connect } from 'react-redux';\n\nimport { setFilter } from '../../../actions/notifications';\nimport FilterBar from '../components/filter_bar';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport DeleteForeverIcon from '@/material-icons/400-24px/delete_forever.svg?react';\nimport DoneAllIcon from '@/material-icons/400-24px/done_all.svg?react';\nimport NotificationsIcon from '@/material-icons/400-24px/notifications-fill.svg?react';\nimport { compareId } from 'flavours/glitch/compare_id';\nimport { Icon }  from 'flavours/glitch/components/icon';\nimport { NotSignedInIndicator } from 'flavours/glitch/components/not_signed_in_indicator';\nimport { identityContextPropShape, withIdentity } from 'flavours/glitch/identity_context';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { submitMarkers } from '../../actions/markers';\nimport {\n  enterNotificationClearingMode,\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from '../../actions/notifications';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { LoadGap } from '../../components/load_gap';\nimport ScrollableList from '../../components/scrollable_list';\nimport NotificationPurgeButtonsContainer from '../../containers/notification_purge_buttons_container';\n\nimport { FilteredNotificationsBanner } from './components/filtered_notifications_banner';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport NotificationContainer from './containers/notification_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  enterNotifCleaning : { id: 'notification_purge.start', defaultMessage: 'Enter notification cleaning mode' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  localSettings:  state.get('local_settings'),\n  isLoading: state.getIn(['notifications', 'isLoading'], 0) > 0,\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  notifCleaningActive: state.getIn(['notifications', 'cleaningMode']),\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\n/* glitch */\nconst mapDispatchToProps = dispatch => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n  dispatch,\n});\n\nclass Notifications extends PureComponent {\n  static propTypes = {\n    identity: identityContextPropShape,\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    localSettings: ImmutablePropTypes.map,\n    notifCleaningActive: PropTypes.bool,\n    onEnterCleaningMode: PropTypes.func,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  state = {\n    animatingNCD: false,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    // this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setColumnRef = c => {\n    this.column = c;\n  };\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleTransitionEndNCD = () => {\n    this.setState({ animatingNCD: false });\n  };\n\n  onEnterCleaningMode = () => {\n    this.setState({ animatingNCD: true });\n    this.props.onEnterCleaningMode(!this.props.notifCleaningActive);\n  };\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const { notifCleaningActive } = this.props;\n    const { animatingNCD } = this.state;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n    const { signedIn } = this.props.identity;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = (signedIn && showFilterBar)\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    let scrollContainer;\n\n    if (signedIn) {\n      scrollContainer = (\n        <ScrollableList\n          scrollKey={`notifications-${columnId}`}\n          trackScroll={!pinned}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          numPending={numPending}\n          prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n          alwaysPrepend\n          emptyMessage={emptyMessage}\n          onLoadMore={this.handleLoadOlder}\n          onLoadPending={this.handleLoadPending}\n          onScrollToTop={this.handleScrollToTop}\n          onScroll={this.handleScroll}\n          bindToDocument={!multiColumn}\n        >\n          {scrollableContent}\n        </ScrollableList>\n      );\n    } else {\n      scrollContainer = <NotSignedInIndicator />;\n    }\n\n    const extraButtons = [];\n\n    if (canMarkAsRead) {\n      extraButtons.push(\n        <button\n          key='mark-as-read'\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='done-all' icon={DoneAllIcon} />\n        </button>,\n      );\n    }\n\n    const notifCleaningButtonClassName = classNames('column-header__button', {\n      'active': notifCleaningActive,\n    });\n\n    const notifCleaningDrawerClassName = classNames('ncd column-header__collapsible', {\n      'collapsed': !notifCleaningActive,\n      'animating': animatingNCD,\n    });\n\n    const msgEnterNotifCleaning = intl.formatMessage(messages.enterNotifCleaning);\n\n    extraButtons.push(\n      <button\n        key='notif-cleaning'\n        aria-label={msgEnterNotifCleaning}\n        title={msgEnterNotifCleaning}\n        onClick={this.onEnterCleaningMode}\n        className={notifCleaningButtonClassName}\n      >\n        <Icon id='eraser' icon={DeleteForeverIcon} />\n      </button>,\n    );\n\n    const notifCleaningDrawer = (\n      <div className={notifCleaningDrawerClassName} onTransitionEnd={this.handleTransitionEndNCD}>\n        <div className='column-header__collapsible-inner nopad-drawer'>\n          {(notifCleaningActive || animatingNCD) ? (<NotificationPurgeButtonsContainer />) : null }\n        </div>\n      </div>\n    );\n\n    return (\n      <Column\n        bindToDocument={!multiColumn}\n        ref={this.setColumnRef}\n        extraClasses={this.props.notifCleaningActive ? 'notif-cleaning' : null}\n        label={intl.formatMessage(messages.title)}\n      >\n        <ColumnHeader\n          icon='bell'\n          iconComponent={NotificationsIcon}\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          localSettings={this.props.localSettings}\n          extraButton={extraButtons}\n          appendContent={notifCleaningDrawer}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {filterBarContainer}\n\n        <FilteredNotificationsBanner />\n\n        {scrollContainer}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withIdentity(injectIntl(Notifications)));\n"],"sourceRoot":""}