{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/follow_requests/components/account_authorize.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/follow_requests/containers/account_authorize_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/follow_requests/index.jsx"],"names":["messages","defineMessages","authorize","id","defaultMessage","reject","AccountAuthorize","ImmutablePureComponent","render","intl","account","onAuthorize","onReject","this","props","content","__html","get","_jsx","className","Permalink","href","to","concat","Avatar","size","DisplayName","dangerouslySetInnerHTML","IconButton","title","formatMessage","icon","iconComponent","CheckIcon","onClick","CloseIcon","_defineProperty","ImmutablePropTypes","record","isRequired","PropTypes","func","object","injectIntl","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","mapDispatchToProps","dispatch","_ref","authorizeFollowRequest","rejectFollowRequest","heading","FollowRequests","constructor","arguments","_debounce","expandFollowRequests","leading","UNSAFE_componentWillMount","fetchFollowRequests","accountIds","hasMore","multiColumn","locked","domain","isLoading","emptyMessage","FormattedMessage","unlockedPrependMessage","values","Column","bindToDocument","PersonAddIcon","ScrollableList","scrollKey","onLoadMore","handleLoadMore","showLoading","prepend","map","AccountAuthorizeContainer","Helmet","name","params","bool","list","string","getIn","me"],"mappings":"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","file":"js/flavours/glitch/async/follow_requests.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport CheckIcon from '@/material-icons/400-24px/check.svg?react';\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\n\nimport { Avatar } from '../../../components/avatar';\nimport { DisplayName } from '../../../components/display_name';\nimport { IconButton } from '../../../components/icon_button';\nimport { Permalink } from '../../../components/permalink';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nclass AccountAuthorize extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.record.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, account, onAuthorize, onReject } = this.props;\n    const content = { __html: account.get('note_emojified') };\n\n    return (\n      <div className='account-authorize__wrapper'>\n        <div className='account-authorize'>\n          <Permalink href={account.get('url')} to={`/@${account.get('acct')}`} className='detailed-status__display-name'>\n            <div className='account-authorize__avatar'><Avatar account={account} size={48} /></div>\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='account__header__content translate' dangerouslySetInnerHTML={content} />\n        </div>\n\n        <div className='account--panel'>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.authorize)} icon='check' iconComponent={CheckIcon} onClick={onAuthorize} /></div>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.reject)} icon='times' iconComponent={CloseIcon} onClick={onReject} /></div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(AccountAuthorize);\n","import { connect } from 'react-redux';\n\nimport { authorizeFollowRequest, rejectFollowRequest } from '../../../actions/accounts';\nimport { makeGetAccount } from '../../../selectors';\nimport AccountAuthorize from '../components/account_authorize';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AccountAuthorize);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';\n\nimport { fetchFollowRequests, expandFollowRequests } from '../../actions/accounts';\nimport ScrollableList from '../../components/scrollable_list';\nimport { me } from '../../initial_state';\nimport Column from '../ui/components/column';\n\nimport AccountAuthorizeContainer from './containers/account_authorize_container';\n\nconst messages = defineMessages({\n  heading: { id: 'column.follow_requests', defaultMessage: 'Follow requests' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'follow_requests', 'items']),\n  isLoading: state.getIn(['user_lists', 'follow_requests', 'isLoading'], true),\n  hasMore: !!state.getIn(['user_lists', 'follow_requests', 'next']),\n  locked: !!state.getIn(['accounts', me, 'locked']),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nclass FollowRequests extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list,\n    locked: PropTypes.bool,\n    domain: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  UNSAFE_componentWillMount () {\n    this.props.dispatch(fetchFollowRequests());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowRequests());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, locked, domain, isLoading } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.follow_requests' defaultMessage=\"You don't have any follow requests yet. When you receive one, it will show up here.\" />;\n    const unlockedPrependMessage = !locked && accountIds.size > 0 && (\n      <div className='follow_requests-unlocked_explanation'>\n        <FormattedMessage\n          id='follow_requests.unlocked_explanation'\n          defaultMessage='Even though your account is not locked, the {domain} staff thought you might want to review follow requests from these accounts manually.'\n          values={{ domain: domain }}\n        />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='user-plus' iconComponent={PersonAddIcon} heading={intl.formatMessage(messages.heading)}>\n        <ScrollableList\n          scrollKey='follow_requests'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          showLoading={isLoading && accountIds.size === 0}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          prepend={unlockedPrependMessage}\n        >\n          {accountIds.map(id =>\n            <AccountAuthorizeContainer key={id} id={id} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(FollowRequests));\n"],"sourceRoot":""}