{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/list_timeline/index.jsx"],"names":["messages","defineMessages","followed","id","defaultMessage","none","list","ListTimeline","PureComponent","constructor","arguments","_defineProperty","columnId","dispatch","this","props","removeColumn","addColumn","params","history","push","dir","moveColumn","column","scrollTop","c","maxId","expandListTimeline","openModal","modalType","modalProps","listId","_ref","target","updateList","undefined","value","_ref2","checked","componentDidMount","fetchList","disconnect","connectListStream","UNSAFE_componentWillReceiveProps","nextProps","componentWillUnmount","render","hasUnread","multiColumn","intl","pinned","title","get","replies_policy","isExclusive","_jsx","Column","className","LoadingIndicator","BundleColumnError","errorType","_jsxs","bindToDocument","ref","setRef","label","children","ColumnHeader","icon","iconComponent","ListAltIcon","active","onPin","handlePin","onMove","handleMove","onClick","handleHeaderClick","type","tabIndex","handleEditClick","Icon","EditIcon","FormattedMessage","handleDeleteClick","DeleteIcon","Toggle","concat","onChange","onExclusiveToggle","htmlFor","map","policy","RadioButton","name","formatMessage","handleRepliesPolicyChange","StatusListContainer","trackScroll","scrollKey","timelineId","onLoadMore","handleLoadMore","emptyMessage","Helmet","content","withRouter","connect","mapStateToProps","state","getIn","injectIntl"],"mappings":"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","file":"js/flavours/glitch/async/list_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport Toggle from 'react-toggle';\n\nimport DeleteIcon from '@/material-icons/400-24px/delete.svg?react';\nimport EditIcon from '@/material-icons/400-24px/edit.svg?react';\nimport ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { fetchList, updateList } from 'flavours/glitch/actions/lists';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { connectListStream } from 'flavours/glitch/actions/streaming';\nimport { expandListTimeline } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { Icon }  from 'flavours/glitch/components/icon';\nimport { LoadingIndicator } from 'flavours/glitch/components/loading_indicator';\nimport { RadioButton } from 'flavours/glitch/components/radio_button';\nimport BundleColumnError from 'flavours/glitch/features/ui/components/bundle_column_error';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport { WithRouterPropTypes } from 'flavours/glitch/utils/react_router';\n\nconst messages = defineMessages({\n  followed:   { id: 'lists.replies_policy.followed', defaultMessage: 'Any followed user' },\n  none:    { id: 'lists.replies_policy.none', defaultMessage: 'No one' },\n  list:  { id: 'lists.replies_policy.list', defaultMessage: 'Members of the list' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nclass ListTimeline extends PureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('LIST', { id: this.props.params.id }));\n      this.props.history.push('/');\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  UNSAFE_componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n    const { id } = nextProps.params;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  };\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal({\n      modalType: 'LIST_EDITOR',\n      modalProps: { listId: this.props.params.id },\n    }));\n  };\n\n  handleDeleteClick = () => {\n    const { dispatch, columnId } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal({ modalType: 'CONFIRM_DELETE_LIST', modalProps: { listId: id, columnId } }));\n  };\n\n  handleRepliesPolicyChange = ({ target }) => {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n    dispatch(updateList(id, undefined, false, undefined, target.value));\n  };\n\n  onExclusiveToggle = ({ target }) => {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n    dispatch(updateList(id, undefined, false, target.checked, undefined));\n  };\n\n  render () {\n    const { hasUnread, columnId, multiColumn, list, intl } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n    const title  = list ? list.get('title') : id;\n    const replies_policy = list ? list.get('replies_policy') : undefined;\n    const isExclusive = list ? list.get('exclusive') : undefined;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={title}>\n        <ColumnHeader\n          icon='list-ul'\n          iconComponent={ListAltIcon}\n          active={hasUnread}\n          title={title}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <div className='column-settings'>\n            <section className='column-header__links'>\n              <button type='button' className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.handleEditClick}>\n                <Icon id='pencil' icon={EditIcon} /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n              </button>\n\n              <button type='button' className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.handleDeleteClick}>\n                <Icon id='trash' icon={DeleteIcon} /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n              </button>\n            </section>\n\n            <section>\n              <div className='setting-toggle'>\n                <Toggle id={`list-${id}-exclusive`} checked={isExclusive} onChange={this.onExclusiveToggle} />\n                <label htmlFor={`list-${id}-exclusive`} className='setting-toggle__label'>\n                  <FormattedMessage id='lists.exclusive' defaultMessage='Hide these posts from home' />\n                </label>\n              </div>\n            </section>\n\n            {replies_policy !== undefined && (\n              <section aria-labelledby={`list-${id}-replies-policy`}>\n                <h3 id={`list-${id}-replies-policy`}><FormattedMessage id='lists.replies_policy.title' defaultMessage='Show replies to:' /></h3>\n\n                <div className='column-settings__row'>\n                  { ['none', 'list', 'followed'].map(policy => (\n                    <RadioButton name='order' key={policy} value={policy} label={intl.formatMessage(messages[policy])} checked={replies_policy === policy} onChange={this.handleRepliesPolicyChange} />\n                  ))}\n                </div>\n              </section>\n            )}\n          </div>\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`list_timeline-${columnId}`}\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet. When members of this list post new statuses, they will appear here.' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{title}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default withRouter(connect(mapStateToProps)(injectIntl(ListTimeline)));\n"],"sourceRoot":""}