{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/local_settings/navigation/item/index.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/local_settings/navigation/index.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/local_settings/page/deprecated_item/index.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/local_settings/page/item/index.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/local_settings/page/index.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/local_settings/index.jsx"],"names":["LocalSettingsPage","PureComponent","constructor","arguments","_defineProperty","e","index","onNavigate","this","props","preventDefault","render","handleClick","active","className","href","icon","iconComponent","title","finalClassName","classNames","iconElem","_jsx","Icon","id","onClick","messages","defineMessages","general","defaultMessage","compose","content_warnings","collapsed","media","preferences","close","LocalSettingsNavigation","intl","onClose","LocalSettingsNavigationItem","ManufacturingIcon","formatMessage","EditIcon","WarningIcon","ExpandLessIcon","ImageIcon","preferencesLink","SettingsIcon","CloseIcon","injectIntl","LocalSettingsPageItem","options","children","placeholder","value","length","currentValue","optionElems","map","opt","optionId","concat","htmlFor","type","name","checked","disabled","message","hint","target","item","onChange","handleChange","settings","inputProps","dependsOn","dependsOnNot","enabled","i","getIn","_jsx2","onBlur","side_arm_none","side_arm_keep","side_arm_copy","side_arm_restrict","regexp","rewrite_mentions_no","rewrite_mentions_acct","rewrite_mentions_username","pop_in_left","pop_in_right","public","unlisted","private","direct","_ref","FormattedMessage","_ref2","_ref3","DeprecatedLocalSettingsPageItem","expandSpoilers","values","settings_page_link","_ref4","min","max","_ref5","pages","CurrentPage","LocalSettings","currentIndex","setState","navigateTo","state","connect","get","dispatch","setting","changeLocalSetting","closeModal","modalType","undefined","ignoreFocus"],"mappings":"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","file":"js/flavours/glitch/async/settings_modal.js","sourcesContent":["//  Package imports\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Icon } from 'flavours/glitch/components/icon';\n\nexport default class LocalSettingsPage extends PureComponent {\n\n  static propTypes = {\n    active: PropTypes.bool,\n    className: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.string,\n    iconComponent: PropTypes.func,\n    index: PropTypes.number.isRequired,\n    onNavigate: PropTypes.func,\n    title: PropTypes.string,\n  };\n\n  handleClick = (e) => {\n    const { index, onNavigate } = this.props;\n    if (onNavigate) {\n      onNavigate(index);\n      e.preventDefault();\n    }\n  };\n\n  render () {\n    const { handleClick } = this;\n    const {\n      active,\n      className,\n      href,\n      icon,\n      iconComponent,\n      onNavigate,\n      title,\n    } = this.props;\n\n    const finalClassName = classNames('glitch', 'local-settings__navigation__item', {\n      active,\n    }, className);\n\n    const iconElem = icon ? <Icon id={icon} icon={iconComponent} /> : null;\n\n    if (href) return (\n      <a\n        href={href}\n        className={finalClassName}\n        title={title}\n        aria-label={title}\n      >\n        {iconElem} <span>{title}</span>\n      </a>\n    );\n    else if (onNavigate) return (\n      <button\n        onClick={handleClick}\n        className={finalClassName}\n        title={title}\n        aria-label={title}\n      >\n        {iconElem} <span>{title}</span>\n      </button>\n    );\n    else return null;\n  }\n\n}\n","//  Package imports\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, defineMessages } from 'react-intl';\n\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport EditIcon from '@/material-icons/400-24px/edit.svg?react';\nimport ExpandLessIcon from '@/material-icons/400-24px/expand_less.svg?react';\nimport ImageIcon from '@/material-icons/400-24px/image.svg?react';\nimport ManufacturingIcon from '@/material-icons/400-24px/manufacturing.svg?react';\nimport SettingsIcon from '@/material-icons/400-24px/settings-fill.svg?react';\nimport WarningIcon from '@/material-icons/400-24px/warning.svg?react';\nimport { preferencesLink } from 'flavours/glitch/utils/backend_links';\n\nimport LocalSettingsNavigationItem from './item';\n\nconst messages = defineMessages({\n  general: {  id: 'settings.general', defaultMessage: 'General' },\n  compose: {  id: 'settings.compose_box_opts', defaultMessage: 'Compose box' },\n  content_warnings: { id: 'settings.content_warnings', defaultMessage: 'Content Warnings' },\n  collapsed: { id: 'settings.collapsed_statuses', defaultMessage: 'Collapsed toots' },\n  media: { id: 'settings.media', defaultMessage: 'Media' },\n  preferences: { id: 'settings.preferences', defaultMessage: 'Preferences' },\n  close: { id: 'settings.close', defaultMessage: 'Close' },\n});\n\nclass LocalSettingsNavigation extends PureComponent {\n\n  static propTypes = {\n    index      : PropTypes.number,\n    intl       : PropTypes.object.isRequired,\n    onClose    : PropTypes.func.isRequired,\n    onNavigate : PropTypes.func.isRequired,\n  };\n\n  render () {\n\n    const { index, intl, onClose, onNavigate } = this.props;\n\n    return (\n      <nav className='glitch local-settings__navigation'>\n        <LocalSettingsNavigationItem\n          active={index === 0}\n          index={0}\n          onNavigate={onNavigate}\n          icon='cogs'\n          iconComponent={ManufacturingIcon}\n          title={intl.formatMessage(messages.general)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 1}\n          index={1}\n          onNavigate={onNavigate}\n          icon='pencil'\n          iconComponent={EditIcon}\n          title={intl.formatMessage(messages.compose)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 2}\n          index={2}\n          onNavigate={onNavigate}\n          icon='warning'\n          iconComponent={WarningIcon}\n          title={intl.formatMessage(messages.content_warnings)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 3}\n          index={3}\n          onNavigate={onNavigate}\n          icon='angle-double-up'\n          iconComponent={ExpandLessIcon}\n          title={intl.formatMessage(messages.collapsed)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 4}\n          index={4}\n          onNavigate={onNavigate}\n          icon='image'\n          iconComponent={ImageIcon}\n          title={intl.formatMessage(messages.media)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 5}\n          href={preferencesLink}\n          index={5}\n          icon='cog'\n          iconComponent={SettingsIcon}\n          title={intl.formatMessage(messages.preferences)}\n        />\n        <LocalSettingsNavigationItem\n          active={index === 6}\n          className='close'\n          index={5}\n          onNavigate={onClose}\n          icon='times'\n          iconComponent={CloseIcon}\n          title={intl.formatMessage(messages.close)}\n        />\n      </nav>\n    );\n  }\n\n}\n\nexport default injectIntl(LocalSettingsNavigation);\n","//  Package imports\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPageItem extends PureComponent {\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    id: PropTypes.string.isRequired,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n      hint: PropTypes.string,\n    })),\n    value: PropTypes.any,\n    placeholder: PropTypes.string,\n  };\n\n  render () {\n    const { id, options, children, placeholder, value } = this.props;\n\n    if (options && options.length > 0) {\n      const currentValue = value;\n      const optionElems = options && options.length > 0 && options.map((opt) => {\n        let optionId = `${id}--${opt.value}`;\n        return (\n          <label key={id} htmlFor={optionId}>\n            <input\n              type='radio'\n              name={id}\n              id={optionId}\n              value={opt.value}\n              checked={currentValue === opt.value}\n              disabled\n            />\n            {opt.message}\n            {opt.hint && <span className='hint'>{opt.hint}</span>}\n          </label>\n        );\n      });\n      return (\n        <div className='glitch local-settings__page__item radio_buttons'>\n          <fieldset>\n            <legend>{children}</legend>\n            {optionElems}\n          </fieldset>\n        </div>\n      );\n    } else if (placeholder) {\n      return (\n        <div className='glitch local-settings__page__item string'>\n          <label htmlFor={id}>\n            <p>{children}</p>\n            <p>\n              <input\n                id={id}\n                type='text'\n                value={value}\n                placeholder={placeholder}\n                disabled\n              />\n            </p>\n          </label>\n        </div>\n      );\n    } else return (\n      <div className='glitch local-settings__page__item boolean'>\n        <label htmlFor={id}>\n          <input\n            id={id}\n            type='checkbox'\n            checked={value}\n            disabled\n          />\n          {children}\n        </label>\n      </div>\n    );\n  }\n\n}\n","//  Package imports\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nexport default class LocalSettingsPageItem extends PureComponent {\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    dependsOn: PropTypes.array,\n    dependsOnNot: PropTypes.array,\n    id: PropTypes.string.isRequired,\n    item: PropTypes.array.isRequired,\n    onChange: PropTypes.func.isRequired,\n    inputProps: PropTypes.object,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n      hint: PropTypes.string,\n    })),\n    settings: ImmutablePropTypes.map.isRequired,\n    placeholder: PropTypes.string,\n    disabled: PropTypes.bool,\n  };\n\n  handleChange = e => {\n    const { target } = e;\n    const { item, onChange, options, placeholder } = this.props;\n    if (options && options.length > 0) onChange(item, target.value);\n    else if (placeholder) onChange(item, target.value);\n    else onChange(item, target.checked);\n  };\n\n  render () {\n    const { handleChange } = this;\n    const { settings, item, id, inputProps, options, children, dependsOn, dependsOnNot, placeholder, disabled } = this.props;\n    let enabled = !disabled;\n\n    if (dependsOn) {\n      for (let i = 0; i < dependsOn.length; i++) {\n        enabled = enabled && settings.getIn(dependsOn[i]);\n      }\n    }\n    if (dependsOnNot) {\n      for (let i = 0; i < dependsOnNot.length; i++) {\n        enabled = enabled && !settings.getIn(dependsOnNot[i]);\n      }\n    }\n\n    if (options && options.length > 0) {\n      const currentValue = settings.getIn(item);\n      const optionElems = options && options.length > 0 && options.map((opt) => {\n        let optionId = `${id}--${opt.value}`;\n        return (\n          <label key={optionId} htmlFor={optionId}>\n            <input\n              type='radio'\n              name={id}\n              id={optionId}\n              value={opt.value}\n              onBlur={handleChange}\n              onChange={handleChange}\n              checked={currentValue === opt.value}\n              disabled={!enabled}\n              {...inputProps}\n            />\n            {opt.message}\n            {opt.hint && <span className='hint'>{opt.hint}</span>}\n          </label>\n        );\n      });\n      return (\n        <div className='glitch local-settings__page__item radio_buttons'>\n          <fieldset>\n            <legend>{children}</legend>\n            {optionElems}\n          </fieldset>\n        </div>\n      );\n    } else if (placeholder) {\n      return (\n        <div className='glitch local-settings__page__item string'>\n          <label htmlFor={id}>\n            <p>{children}</p>\n            <p>\n              <input\n                id={id}\n                type='text'\n                value={settings.getIn(item)}\n                placeholder={placeholder}\n                onChange={handleChange}\n                disabled={!enabled}\n                {...inputProps}\n              />\n            </p>\n          </label>\n        </div>\n      );\n    } else return (\n      <div className='glitch local-settings__page__item boolean'>\n        <label htmlFor={id}>\n          <input\n            id={id}\n            type='checkbox'\n            checked={settings.getIn(item)}\n            onChange={handleChange}\n            disabled={!enabled}\n            {...inputProps}\n          />\n          {children}\n        </label>\n      </div>\n    );\n  }\n\n}\n","//  Package imports\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\n\n//  Our imports\nimport { expandSpoilers } from 'flavours/glitch/initial_state';\nimport { preferenceLink } from 'flavours/glitch/utils/backend_links';\n\nimport DeprecatedLocalSettingsPageItem from './deprecated_item';\nimport LocalSettingsPageItem from './item';\n\n//  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\nconst messages = defineMessages({\n  side_arm_none: { id: 'settings.side_arm.none', defaultMessage: 'None' },\n  side_arm_keep: { id: 'settings.side_arm_reply_mode.keep', defaultMessage: 'Keep its set privacy' },\n  side_arm_copy: { id: 'settings.side_arm_reply_mode.copy', defaultMessage: 'Copy privacy setting of the toot being replied to' },\n  side_arm_restrict: { id: 'settings.side_arm_reply_mode.restrict', defaultMessage: 'Restrict privacy setting to that of the toot being replied to' },\n  regexp: { id: 'settings.content_warnings.regexp', defaultMessage: 'Regular expression' },\n  rewrite_mentions_no: { id: 'settings.rewrite_mentions_no', defaultMessage: 'Do not rewrite mentions' },\n  rewrite_mentions_acct: { id: 'settings.rewrite_mentions_acct', defaultMessage: 'Rewrite with username and domain (when the account is remote)' },\n  rewrite_mentions_username: { id: 'settings.rewrite_mentions_username', defaultMessage:  'Rewrite with username' },\n  pop_in_left: { id: 'settings.pop_in_left', defaultMessage: 'Left' },\n  pop_in_right: { id: 'settings.pop_in_right', defaultMessage:  'Right' },\n  public: { id: 'privacy.public.short', defaultMessage: 'Public' },\n  unlisted: { id: 'privacy.unlisted.short', defaultMessage: 'Unlisted' },\n  private: { id: 'privacy.private.short', defaultMessage: 'Followers' },\n  direct: { id: 'privacy.direct.short', defaultMessage: 'Specific people' },\n});\n\nclass LocalSettingsPage extends PureComponent {\n\n  static propTypes = {\n    index    : PropTypes.number,\n    intl     : PropTypes.object.isRequired,\n    onChange : PropTypes.func.isRequired,\n    settings : ImmutablePropTypes.map.isRequired,\n  };\n\n  pages = [\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page general'>\n        <h1><FormattedMessage id='settings.general' defaultMessage='General' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['show_reply_count']}\n          id='mastodon-settings--reply-count'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.show_reply_counter' defaultMessage='Display an estimate of the reply count' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['hicolor_privacy_icons']}\n          id='mastodon-settings--hicolor_privacy_icons'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.hicolor_privacy_icons' defaultMessage='High color privacy icons' />\n          <span className='hint'><FormattedMessage id='settings.hicolor_privacy_icons.hint' defaultMessage='Display privacy icons in bright and easily distinguishable colors' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_boost_missing_media_description']}\n          id='mastodon-settings--confirm_boost_missing_media_description'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_boost_missing_media_description' defaultMessage='Show confirmation dialog before boosting toots lacking media descriptions' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['tag_misleading_links']}\n          id='mastodon-settings--tag_misleading_links'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.tag_misleading_links' defaultMessage='Tag misleading links' />\n          <span className='hint'><FormattedMessage id='settings.tag_misleading_links.hint' defaultMessage='Add a visual indication with the link target host to every link not mentioning it explicitly' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['rewrite_mentions']}\n          id='mastodon-settings--rewrite_mentions'\n          options={[\n            { value: 'no', message: intl.formatMessage(messages.rewrite_mentions_no) },\n            { value: 'acct', message: intl.formatMessage(messages.rewrite_mentions_acct) },\n            { value: 'username', message: intl.formatMessage(messages.rewrite_mentions_username) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.rewrite_mentions' defaultMessage='Rewrite mentions in displayed statuses' />\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.notifications_opts' defaultMessage='Notifications options' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['notifications', 'tab_badge']}\n            id='mastodon-settings--notifications-tab_badge'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.notifications.tab_badge' defaultMessage='Unread notifications badge' />\n            <span className='hint'><FormattedMessage id='settings.notifications.tab_badge.hint' defaultMessage=\"Display a badge for unread notifications in the column icons when the notifications column isn't open\" /></span>\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['notifications', 'favicon_badge']}\n            id='mastodon-settings--notifications-favicon_badge'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.notifications.favicon_badge' defaultMessage='Unread notifications favicon badge' />\n            <span className='hint'><FormattedMessage id='settings.notifications.favicon_badge.hint' defaultMessage='Add a badge for unread notifications to the favicon' /></span>\n          </LocalSettingsPageItem>\n        </section>\n\n        <section>\n          <h2><FormattedMessage id='settings.status_icons' defaultMessage='Toot icons' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'language']}\n            id='mastodon-settings--status-icons-language'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_language' defaultMessage='Language indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'reply']}\n            id='mastodon-settings--status-icons-reply'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_reply' defaultMessage='Reply indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'local_only']}\n            id='mastodon-settings--status-icons-local_only'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_local_only' defaultMessage='Local-only indicator' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'media']}\n            id='mastodon-settings--status-icons-media'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_media' defaultMessage='Media and poll indicators' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['status_icons', 'visibility']}\n            id='mastodon-settings--status-icons-visibility'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.status_icons_visibility' defaultMessage='Toot privacy indicator' />\n          </LocalSettingsPageItem>\n        </section>\n        <section>\n          <h2><FormattedMessage id='settings.layout_opts' defaultMessage='Layout options' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['stretch']}\n            id='mastodon-settings--stretch'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.wide_view' defaultMessage='Wide view (Desktop mode only)' />\n            <span className='hint'><FormattedMessage id='settings.wide_view_hint' defaultMessage='Stretches columns to better fill the available space.' /></span>\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['single_column']}\n            id='mastodon-settings--single_column'\n            onChange={onChange}\n          >\n            <FormattedMessage id='settings.single_column' defaultMessage='Single column (Desktop mode only)' />\n            <span className='hint'>Takes effect after a refresh.</span>\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page compose_box_opts'>\n        <h1><FormattedMessage id='settings.compose_box_opts' defaultMessage='Compose box' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['always_show_spoilers_field']}\n          id='mastodon-settings--always_show_spoilers_field'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.always_show_spoilers_field' defaultMessage='Always enable the Content Warning field' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['prepend_cw_re']}\n          id='mastodon-settings--prepend_cw_re'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.prepend_cw_re' defaultMessage='Prepend “re: ” to content warnings when replying' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['preselect_on_reply']}\n          id='mastodon-settings--preselect_on_reply'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.preselect_on_reply' defaultMessage='Pre-select usernames on reply' />\n          <span className='hint'><FormattedMessage id='settings.preselect_on_reply_hint' defaultMessage='When replying to a conversation with multiple participants, pre-select usernames past the first' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_missing_media_description']}\n          id='mastodon-settings--confirm_missing_media_description'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_missing_media_description' defaultMessage='Show confirmation dialog before sending toots lacking media descriptions' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['confirm_before_clearing_draft']}\n          id='mastodon-settings--confirm_before_clearing_draft'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.confirm_before_clearing_draft' defaultMessage='Show confirmation dialog before overwriting the message being composed' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['show_content_type_choice']}\n          id='mastodon-settings--show_content_type_choice'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.show_content_type_choice' defaultMessage='Show content-type choice when authoring toots' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['show_published_toast']}\n          id='mastodon-settings--show_published_toast'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.show_published_toast' defaultMessage='Display toast when publishing/saving a post' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['side_arm']}\n          id='mastodon-settings--side_arm'\n          options={[\n            { value: 'none', message: intl.formatMessage(messages.side_arm_none) },\n            { value: 'direct', message: intl.formatMessage(messages.direct) },\n            { value: 'private', message: intl.formatMessage(messages.private) },\n            { value: 'unlisted', message: intl.formatMessage(messages.unlisted) },\n            { value: 'public', message: intl.formatMessage(messages.public) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.side_arm' defaultMessage='Secondary toot button:' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['side_arm_reply_mode']}\n          id='mastodon-settings--side_arm_reply_mode'\n          options={[\n            { value: 'keep', message: intl.formatMessage(messages.side_arm_keep) },\n            { value: 'copy', message: intl.formatMessage(messages.side_arm_copy) },\n            { value: 'restrict', message: intl.formatMessage(messages.side_arm_restrict) },\n          ]}\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.side_arm_reply_mode' defaultMessage='When replying to a toot, the secondary toot button should:' />\n        </LocalSettingsPageItem>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page content_warnings'>\n        <h1><FormattedMessage id='settings.content_warnings' defaultMessage='Content Warnings' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['content_warnings', 'shared_state']}\n          id='mastodon-settings--content_warnings-shared_state'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.content_warnings_shared_state' defaultMessage='Show/hide content of all copies at once' />\n          <span className='hint'><FormattedMessage id='settings.content_warnings_shared_state_hint' defaultMessage='Reproduce upstream Mastodon behavior by having the Content Warning button affect all copies of a post at once. This will prevent automatic collapsing of any copy of a toot with unfolded CW' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['content_warnings', 'media_outside']}\n          id='mastodon-settings--content_warnings-media_outside'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.content_warnings_media_outside' defaultMessage='Display media attachments outside content warnings' />\n          <span className='hint'><FormattedMessage id='settings.content_warnings_media_outside_hint' defaultMessage='Reproduce upstream Mastodon behavior by having the Content Warning toggle not affect media attachments' /></span>\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.content_warnings_unfold_opts' defaultMessage='Auto-unfolding options' /></h2>\n          <DeprecatedLocalSettingsPageItem\n            id='mastodon-settings--content_warnings-auto_unfold'\n            value={expandSpoilers}\n          >\n            <FormattedMessage id='settings.enable_content_warnings_auto_unfold' defaultMessage='Automatically unfold content-warnings' />\n            <span className='hint'>\n              <FormattedMessage\n                id='settings.deprecated_setting'\n                defaultMessage=\"This setting is now controlled from Mastodon's {settings_page_link}\"\n                values={{\n                  settings_page_link: (\n                    <span>\n                      <FormattedMessage\n                        id='settings.shared_settings_link'\n                        defaultMessage='user preferences'\n                      />\n                    </span>\n                  ),\n                }}\n              />\n            </span>\n          </DeprecatedLocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['content_warnings', 'filter']}\n            id='mastodon-settings--content_warnings-auto_unfold'\n            onChange={onChange}\n            placeholder={intl.formatMessage(messages.regexp)}\n            disabled={!expandSpoilers}\n          >\n            <FormattedMessage id='settings.content_warnings_filter' defaultMessage='Content warnings to not automatically unfold:' />\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ onChange, settings }) => (\n      <div className='glitch local-settings__page collapsed'>\n        <h1><FormattedMessage id='settings.collapsed_statuses' defaultMessage='Collapsed toots' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['collapsed', 'enabled']}\n          id='mastodon-settings--collapsed-enabled'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.enable_collapsed' defaultMessage='Enable collapsed toots' />\n          <span className='hint'><FormattedMessage id='settings.enable_collapsed_hint' defaultMessage='Collapsed posts have parts of their contents hidden to take up less screen space. This is distinct from the Content Warning feature' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['collapsed', 'show_action_bar']}\n          id='mastodon-settings--collapsed-show-action-bar'\n          onChange={onChange}\n          dependsOn={[['collapsed', 'enabled']]}\n        >\n          <FormattedMessage id='settings.show_action_bar' defaultMessage='Show action buttons in collapsed toots' />\n        </LocalSettingsPageItem>\n        <section>\n          <h2><FormattedMessage id='settings.auto_collapse' defaultMessage='Automatic collapsing' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'all']}\n            id='mastodon-settings--collapsed-auto-all'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_all' defaultMessage='Everything' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'notifications']}\n            id='mastodon-settings--collapsed-auto-notifications'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_notifications' defaultMessage='Notifications' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'lengthy']}\n            id='mastodon-settings--collapsed-auto-lengthy'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_lengthy' defaultMessage='Lengthy toots' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'reblogs']}\n            id='mastodon-settings--collapsed-auto-reblogs'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_reblogs' defaultMessage='Boosts' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'replies']}\n            id='mastodon-settings--collapsed-auto-replies'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_replies' defaultMessage='Replies' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'media']}\n            id='mastodon-settings--collapsed-auto-media'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n          >\n            <FormattedMessage id='settings.auto_collapse_media' defaultMessage='Toots with media' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'auto', 'height']}\n            id='mastodon-settings--collapsed-auto-height'\n            placeholder='400'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n            dependsOnNot={[['collapsed', 'auto', 'all']]}\n            inputProps={{ type: 'number', min: '200', max: '999' }}\n          >\n            <FormattedMessage id='settings.auto_collapse_height' defaultMessage='Height (in pixels) for a toot to be considered lengthy' />\n          </LocalSettingsPageItem>\n        </section>\n        <section>\n          <h2><FormattedMessage id='settings.image_backgrounds' defaultMessage='Image backgrounds' /></h2>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'backgrounds', 'user_backgrounds']}\n            id='mastodon-settings--collapsed-user-backgrouns'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.image_backgrounds_users' defaultMessage='Give collapsed toots an image background' />\n          </LocalSettingsPageItem>\n          <LocalSettingsPageItem\n            settings={settings}\n            item={['collapsed', 'backgrounds', 'preview_images']}\n            id='mastodon-settings--collapsed-preview-images'\n            onChange={onChange}\n            dependsOn={[['collapsed', 'enabled']]}\n          >\n            <FormattedMessage id='settings.image_backgrounds_media' defaultMessage='Preview collapsed toot media' />\n            <span className='hint'><FormattedMessage id='settings.image_backgrounds_media_hint' defaultMessage='If the post has any media attachment, use the first one as a background' /></span>\n          </LocalSettingsPageItem>\n        </section>\n      </div>\n    ),\n    ({ intl, onChange, settings }) => (\n      <div className='glitch local-settings__page media'>\n        <h1><FormattedMessage id='settings.media' defaultMessage='Media' /></h1>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'letterbox']}\n          id='mastodon-settings--media-letterbox'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_letterbox' defaultMessage='Letterbox media' />\n          <span className='hint'><FormattedMessage id='settings.media_letterbox_hint' defaultMessage='Scale down and letterbox media to fill the image containers instead of stretching and cropping them' /></span>\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'fullwidth']}\n          id='mastodon-settings--media-fullwidth'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_fullwidth' defaultMessage='Full-width media previews' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['inline_preview_cards']}\n          id='mastodon-settings--inline-preview-cards'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.inline_preview_cards' defaultMessage='Inline preview cards for external links' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'reveal_behind_cw']}\n          id='mastodon-settings--reveal-behind-cw'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.media_reveal_behind_cw' defaultMessage='Reveal sensitive media behind a CW by default' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'pop_in_player']}\n          id='mastodon-settings--pop-in-player'\n          onChange={onChange}\n        >\n          <FormattedMessage id='settings.pop_in_player' defaultMessage='Enable pop-in player' />\n        </LocalSettingsPageItem>\n        <LocalSettingsPageItem\n          settings={settings}\n          item={['media', 'pop_in_position']}\n          id='mastodon-settings--pop-in-position'\n          options={[\n            { value: 'left', message: intl.formatMessage(messages.pop_in_left) },\n            { value: 'right', message: intl.formatMessage(messages.pop_in_right) },\n          ]}\n          onChange={onChange}\n          dependsOn={[['media', 'pop_in_player']]}\n        >\n          <FormattedMessage id='settings.pop_in_position' defaultMessage='Pop-in player position:' />\n        </LocalSettingsPageItem>\n      </div>\n    ),\n  ];\n\n  render () {\n    const { pages } = this;\n    const { index, intl, onChange, settings } = this.props;\n    const CurrentPage = pages[index] || pages[0];\n\n    return <CurrentPage intl={intl} onChange={onChange} settings={settings} />;\n  }\n\n}\n\nexport default injectIntl(LocalSettingsPage);\n","//  Package imports.\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\n//  Our imports\nimport { changeLocalSetting } from 'flavours/glitch/actions/local_settings';\nimport { closeModal } from 'flavours/glitch/actions/modal';\n\nimport LocalSettingsNavigation from './navigation';\nimport LocalSettingsPage from './page';\n\nconst mapStateToProps = state => ({\n  settings: state.get('local_settings'),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange (setting, value) {\n    dispatch(changeLocalSetting(setting, value));\n  },\n  onClose () {\n    dispatch(closeModal({\n      modalType: undefined,\n      ignoreFocus: false,\n    }));\n  },\n});\n\nclass LocalSettings extends PureComponent {\n\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    settings: ImmutablePropTypes.map.isRequired,\n  };\n\n  state = {\n    currentIndex: 0,\n  };\n\n  navigateTo = (index) =>\n    this.setState({ currentIndex: +index });\n\n  render () {\n\n    const { navigateTo } = this;\n    const { onChange, onClose, settings } = this.props;\n    const { currentIndex } = this.state;\n\n    return (\n      <div className='glitch modal-root__modal local-settings'>\n        <LocalSettingsNavigation\n          index={currentIndex}\n          onClose={onClose}\n          onNavigate={navigateTo}\n        />\n        <LocalSettingsPage\n          index={currentIndex}\n          onChange={onChange}\n          settings={settings}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocalSettings);\n"],"sourceRoot":""}