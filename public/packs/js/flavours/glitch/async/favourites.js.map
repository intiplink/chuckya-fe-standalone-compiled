{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/favourites/index.jsx"],"names":["messages","defineMessages","heading","id","defaultMessage","refresh","Favourites","ImmutablePureComponent","constructor","arguments","_defineProperty","this","column","scrollTop","c","props","dispatch","fetchFavourites","params","statusId","_debounce","expandFavourites","leading","UNSAFE_componentWillMount","accountIds","render","intl","hasMore","isLoading","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","_jsxs","ref","setRef","children","ColumnHeader","icon","iconComponent","StarIcon","title","formatMessage","onClick","handleHeaderClick","showBackButton","extraButton","type","className","handleRefresh","Icon","RefreshIcon","ScrollableList","scrollKey","onLoadMore","handleLoadMore","bindToDocument","map","AccountContainer","withNote","Helmet","name","content","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","getIn","injectIntl"],"mappings":"0TAsBA,MAAMA,EAAWC,YAAe,CAC9BC,QAAS,CAAEC,GAAG,uBAAyBC,eAAe,iBACtDC,QAAS,CAAEF,GAAG,UAAYC,eAAe,aAS3C,MAAME,UAAmBC,IAAuBC,cAAA,SAAAC,WAAAC,YAAA,0BAkB1B,KAClBC,KAAKC,OAAOC,WAAW,IACxBH,YAAA,eAEQI,IACPH,KAAKC,OAASE,CAAC,IAChBJ,YAAA,sBAEe,KACdC,KAAKI,MAAMC,SAASC,YAAgBN,KAAKI,MAAMG,OAAOC,UAAU,IACjET,YAAA,sBAEgBU,KAAS,KACxBT,KAAKI,MAAMC,SAASK,YAAiBV,KAAKI,MAAMG,OAAOC,UAAU,GAChE,IAAK,CAAEG,SAAS,IAAO,CApB1BC,4BACOZ,KAAKI,MAAMS,YACdb,KAAKI,MAAMC,SAASC,YAAgBN,KAAKI,MAAMG,OAAOC,UAE1D,CAkBAM,SACE,MAAM,KAAEC,EAAI,WAAEF,EAAU,QAAEG,EAAO,UAAEC,EAAS,YAAEC,GAAgBlB,KAAKI,MAEnE,IAAKS,EACH,OACEM,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAAC/B,GAAE,0BAA2BC,eAAe,mFAEnF,OACE+B,eAACJ,IAAM,CAACK,IAAKzB,KAAK0B,OAAOC,SAAA,CACvBR,YAACS,IAAY,CACXC,KAAK,OACLC,cAAeC,IACfC,MAAOjB,EAAKkB,cAAc5C,EAASE,SACnC2C,QAASlC,KAAKmC,kBACdC,gBAAc,EACdlB,YAAaA,EACbmB,YACElB,YAAA,UAAQmB,KAAK,SAASC,UAAU,wBAAwBP,MAAOjB,EAAKkB,cAAc5C,EAASK,SAAU,aAAYqB,EAAKkB,cAAc5C,EAASK,SAAUwC,QAASlC,KAAKwC,oBAAc,EAACrB,YAACsB,IAAI,CAACjD,GAAG,UAAUqC,KAAMa,SAIjNvB,YAACwB,IAAc,CACbC,UAAU,aACVC,WAAY7C,KAAK8C,eACjB9B,QAASA,EACTC,UAAWA,EACXK,aAAcA,EACdyB,gBAAiB7B,QAAY,EAE5BL,EAAWmC,KAAIxD,GACd2B,YAAC8B,IAAgB,CAAUzD,GAAIA,EAAI0D,UAAU,GAAtB1D,MAI3B2B,YAACgC,IAAM,UACLhC,YAAA,QAAMiC,KAAK,SAASC,QAAQ,eAIpC,EAEDtD,YAjFKJ,EAAU,YAEK,CACjBY,OAAQ+C,IAAUC,OAAOC,WACzBnD,SAAUiD,IAAUG,KAAKD,WACzB3C,WAAY6C,IAAmBC,KAC/B3C,QAASsC,IAAUM,KACnB3C,UAAWqC,IAAUM,KACrB1C,YAAaoC,IAAUM,KACvB7C,KAAMuC,IAAUC,OAAOC,aA0EZK,6BAzFSC,CAACC,EAAO3D,KAAK,CACnCS,WAAYkD,EAAMC,MAAM,CAAC,aAAc,gBAAiB5D,EAAMG,OAAOC,SAAU,UAC/EQ,UAAW+C,EAAMC,MAAM,CAAC,aAAc,gBAAiB5D,EAAMG,OAAOC,SAAU,SAC9ES,UAAW8C,EAAMC,MAAM,CAAC,aAAc,gBAAiB5D,EAAMG,OAAOC,SAAU,cAAc,MAsF/EqD,CAAyBI,YAAWtE,G","file":"js/flavours/glitch/async/favourites.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport RefreshIcon from '@/material-icons/400-24px/refresh.svg?react';\nimport StarIcon from '@/material-icons/400-24px/star-fill.svg?react';\nimport { fetchFavourites, expandFavourites } from 'flavours/glitch/actions/interactions';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { Icon }  from 'flavours/glitch/components/icon';\nimport { LoadingIndicator } from 'flavours/glitch/components/loading_indicator';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport Column from 'flavours/glitch/features/ui/components/column';\n\nconst messages = defineMessages({\n  heading: { id: 'column.favourited_by', defaultMessage: 'Favourited by' },\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'favourited_by', props.params.statusId, 'items']),\n  hasMore: !!state.getIn(['user_lists', 'favourited_by', props.params.statusId, 'next']),\n  isLoading: state.getIn(['user_lists', 'favourited_by', props.params.statusId, 'isLoading'], true),\n});\n\nclass Favourites extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  UNSAFE_componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchFavourites(this.props.params.statusId));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchFavourites(this.props.params.statusId));\n  };\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFavourites(this.props.params.statusId));\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, isLoading, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.favourites' defaultMessage='No one has favorited this post yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column ref={this.setRef}>\n        <ColumnHeader\n          icon='star'\n          iconComponent={StarIcon}\n          title={intl.formatMessage(messages.heading)}\n          onClick={this.handleHeaderClick}\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button type='button' className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' icon={RefreshIcon} /></button>\n          )}\n        />\n\n        <ScrollableList\n          scrollKey='favourites'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Favourites));\n"],"sourceRoot":""}