{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/components/avatar_composite.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/components/conversation.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/components/conversations_list.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/components/column_settings.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/containers/column_settings_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/index.jsx"],"names":["AvatarComposite","PureComponent","renderItem","account","size","index","animate","this","props","width","height","top","left","bottom","right","style","concat","_jsx","get","Avatar","render","accounts","className","take","map","i","Math","min","_defineProperty","autoPlayGif","messages","defineMessages","more","id","defaultMessage","open","reply","markAsRead","delete","muteConversation","unmuteConversation","replyConfirm","replyMessage","getAccounts","createSelector","state","_","accountIds","getStatus","makeGetStatus","Conversation","_ref","conversation","scrollKey","onMoveUp","onMoveDown","unread","lastStatusId","intl","useIntl","dispatch","useDispatch","history","useHistory","lastStatus","useSelector","sharedCWState","getIn","expanded","setExpanded","useState","undefined","parseClick","useCallback","e","destination","button","ctrlKey","altKey","metaKey","markConversationRead","push","preventDefault","handleMouseEnter","_ref2","currentTarget","emojis","querySelectorAll","length","emoji","src","getAttribute","handleMouseLeave","_ref3","handleClick","handleMarkAsRead","handleReply","getState","trim","openModal","modalType","modalProps","message","formatMessage","confirm","onConfirm","replyCompose","handleDelete","deleteConversation","handleHotkeyMoveUp","handleHotkeyMoveDown","handleConversationMute","unmuteStatus","muteStatus","handleShowMore","revealStatus","hideStatus","menu","text","action","names","a","Permalink","to","href","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","media","AttachmentList","compact","HotKeys","classNames","tabIndex","onClick","role","RelativeTimestamp","timestamp","onMouseEnter","onMouseLeave","FormattedMessage","values","StatusContent","status","onExpandedToggle","collapsible","IconButton","title","icon","iconComponent","ReplyIcon","DropdownMenuContainer","items","MoreHorizIcon","direction","focusChild","node","alignTop","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","ConversationsList","_conversations$last","other","listRef","useRef","conversations","isLoading","hasMore","last","handleMoveUp","elementIndex","findIndex","x","current","handleMoveDown","debouncedLoadMore","useMemo","_debounce","expandConversations","maxId","leading","handleLoadMore","_jsx2","ScrollableList","showLoading","isEmpty","onLoadMore","ref","children","item","filter_regex","settings","ColumnSettings","onChange","SettingToggle","settingPath","label","SettingText","injectIntl","connect","path","checked","changeSetting","DirectTimeline","columnId","multiColumn","columnRef","pinned","hasUnread","conversationsMode","handlePin","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","handleLoadMoreTimeline","expandDirectTimeline","useEffect","mountConversations","disconnect","connectDirectStream","unmountConversations","_jsxs","Column","bindToDocument","ColumnHeader","MailIcon","active","onPin","onMove","ColumnSettingsContainer","trackScroll","emptyMessage","prepend","target","alwaysPrepend","StatusListContainer","timelineId","Helmet","name","content"],"mappings":"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","file":"js/flavours/glitch/async/direct_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { autoPlayGif } from '../initial_state';\n\nimport { Avatar } from './avatar';\n\nexport default class AvatarComposite extends PureComponent {\n\n  static propTypes = {\n    accounts: ImmutablePropTypes.list.isRequired,\n    animate: PropTypes.bool,\n    size: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    animate: autoPlayGif,\n  };\n\n  renderItem (account, size, index) {\n    const { animate } = this.props;\n\n    let width  = 50;\n    let height = 100;\n    let top    = 'auto';\n    let left   = 'auto';\n    let bottom = 'auto';\n    let right  = 'auto';\n\n    if (size === 1) {\n      width = 100;\n    }\n\n    if (size === 4 || (size === 3 && index > 0)) {\n      height = 50;\n    }\n\n    if (size === 2) {\n      if (index === 0) {\n        right = '1px';\n      } else {\n        left = '1px';\n      }\n    } else if (size === 3) {\n      if (index === 0) {\n        right = '1px';\n      } else if (index > 0) {\n        left = '1px';\n      }\n\n      if (index === 1) {\n        bottom = '1px';\n      } else if (index > 1) {\n        top = '1px';\n      }\n    } else if (size === 4) {\n      if (index === 0 || index === 2) {\n        right = '1px';\n      }\n\n      if (index === 1 || index === 3) {\n        left = '1px';\n      }\n\n      if (index < 2) {\n        bottom = '1px';\n      } else {\n        top = '1px';\n      }\n    }\n\n    const style = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: `${width}%`,\n      height: `${height}%`,\n    };\n\n    return (\n      <div key={account.get('id')} style={style}>\n        <Avatar account={account} animate={animate} />\n      </div>\n    );\n  }\n\n  render() {\n    const { accounts, size } = this.props;\n\n    return (\n      <div className='account__avatar-composite' style={{ width: `${size}px`, height: `${size}px` }}>\n        {accounts.take(4).map((account, i) => this.renderItem(account, Math.min(accounts.size, 4), i))}\n\n        {accounts.size > 4 && (\n          <span className='account__avatar-composite__label'>\n            +{accounts.size - 4}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { useCallback, useState } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\nimport ReplyIcon from '@/material-icons/400-24px/reply.svg?react';\nimport { replyCompose } from 'flavours/glitch/actions/compose';\nimport { markConversationRead, deleteConversation } from 'flavours/glitch/actions/conversations';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { muteStatus, unmuteStatus, revealStatus, hideStatus } from 'flavours/glitch/actions/statuses';\nimport AttachmentList from 'flavours/glitch/components/attachment_list';\nimport AvatarComposite from 'flavours/glitch/components/avatar_composite';\nimport { IconButton } from 'flavours/glitch/components/icon_button';\nimport { Permalink } from 'flavours/glitch/components/permalink';\nimport { RelativeTimestamp } from 'flavours/glitch/components/relative_timestamp';\nimport StatusContent from 'flavours/glitch/components/status_content';\nimport DropdownMenuContainer from 'flavours/glitch/containers/dropdown_menu_container';\nimport { autoPlayGif } from 'flavours/glitch/initial_state';\nimport { makeGetStatus } from 'flavours/glitch/selectors';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst getAccounts = createSelector(\n  (state) => state.get('accounts'),\n  (_, accountIds) => accountIds,\n  (accounts, accountIds) =>\n    accountIds.map(id => accounts.get(id))\n);\n\nconst getStatus = makeGetStatus();\n\nexport const Conversation = ({ conversation, scrollKey, onMoveUp, onMoveDown }) => {\n  const id = conversation.get('id');\n  const unread = conversation.get('unread');\n  const lastStatusId = conversation.get('last_status');\n  const accountIds = conversation.get('accounts');\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const lastStatus = useSelector(state => getStatus(state, { id: lastStatusId }));\n  const accounts = useSelector(state => getAccounts(state, accountIds));\n\n  // glitch-soc additions\n  const sharedCWState = useSelector(state => state.getIn(['state', 'content_warnings', 'shared_state']));\n  const [expanded, setExpanded] = useState(undefined);\n\n  const parseClick = useCallback((e, destination) => {\n    if (e.button === 0 && !(e.ctrlKey || e.altKey || e.metaKey)) {\n      if (destination === undefined) {\n        if (unread) {\n          dispatch(markConversationRead(id));\n        }\n        destination = `/statuses/${lastStatus.get('id')}`;\n      }\n      history.push(destination);\n      e.preventDefault();\n    }\n  }, [dispatch, history, unread, id, lastStatus]);\n\n  const handleMouseEnter = useCallback(({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }, []);\n\n  const handleClick = useCallback(() => {\n    if (unread) {\n      dispatch(markConversationRead(id));\n    }\n\n    history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  }, [dispatch, history, unread, id, lastStatus]);\n\n  const handleMarkAsRead = useCallback(() => {\n    dispatch(markConversationRead(id));\n  }, [dispatch, id]);\n\n  const handleReply = useCallback(() => {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal({\n          modalType: 'CONFIRM',\n          modalProps: {\n            message: intl.formatMessage(messages.replyMessage),\n            confirm: intl.formatMessage(messages.replyConfirm),\n            onConfirm: () => dispatch(replyCompose(lastStatus, history)),\n          },\n        }));\n      } else {\n        dispatch(replyCompose(lastStatus, history));\n      }\n    });\n  }, [dispatch, lastStatus, history, intl]);\n\n  const handleDelete = useCallback(() => {\n    dispatch(deleteConversation(id));\n  }, [dispatch, id]);\n\n  const handleHotkeyMoveUp = useCallback(() => {\n    onMoveUp(id);\n  }, [id, onMoveUp]);\n\n  const handleHotkeyMoveDown = useCallback(() => {\n    onMoveDown(id);\n  }, [id, onMoveDown]);\n\n  const handleConversationMute = useCallback(() => {\n    if (lastStatus.get('muted')) {\n      dispatch(unmuteStatus(lastStatus.get('id')));\n    } else {\n      dispatch(muteStatus(lastStatus.get('id')));\n    }\n  }, [dispatch, lastStatus]);\n\n  const handleShowMore = useCallback(() => {\n    if (lastStatus.get('hidden')) {\n      dispatch(revealStatus(lastStatus.get('id')));\n    } else {\n      dispatch(hideStatus(lastStatus.get('id')));\n    }\n\n    if (lastStatus.get('spoiler_text')) {\n      setExpanded(!expanded);\n    }\n  }, [dispatch, lastStatus, expanded]);\n\n  if (!lastStatus) {\n    return null;\n  }\n\n  const menu = [\n    { text: intl.formatMessage(messages.open), action: handleClick },\n    null,\n    { text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: handleConversationMute },\n  ];\n\n  if (unread) {\n    menu.push({ text: intl.formatMessage(messages.markAsRead), action: handleMarkAsRead });\n    menu.push(null);\n  }\n\n  menu.push({ text: intl.formatMessage(messages.delete), action: handleDelete });\n\n  const names = accounts.map(a => (\n    <Permalink to={`/@${a.get('acct')}`} href={a.get('url')} key={a.get('id')} data-hover-card-account={a.get('id')}>\n      <bdi>\n        <strong\n          className='display-name__html'\n          dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }}\n        />\n      </bdi>\n    </Permalink>\n  )).reduce((prev, cur) => [prev, ', ', cur]);\n\n  const handlers = {\n    reply: handleReply,\n    open: handleClick,\n    moveUp: handleHotkeyMoveUp,\n    moveDown: handleHotkeyMoveDown,\n    toggleHidden: handleShowMore,\n  };\n\n  let media = null;\n  if (lastStatus.get('media_attachments').size > 0) {\n    media = <AttachmentList compact media={lastStatus.get('media_attachments')} />;\n  }\n\n  return (\n    <HotKeys handlers={handlers}>\n      <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex={0}>\n        <div className='conversation__avatar' onClick={handleClick} role='presentation'>\n          <AvatarComposite accounts={accounts} size={48} />\n        </div>\n\n        <div className='conversation__content'>\n          <div className='conversation__content__info'>\n            <div className='conversation__content__relative-time'>\n              {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n            </div>\n\n            <div className='conversation__content__names' onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n              <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n            </div>\n          </div>\n\n          <StatusContent\n            status={lastStatus}\n            parseClick={parseClick}\n            expanded={sharedCWState ? lastStatus.get('hidden') : expanded}\n            onExpandedToggle={handleShowMore}\n            collapsible\n            media={media}\n          />\n\n          <div className='status__action-bar'>\n            <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' iconComponent={ReplyIcon} onClick={handleReply} />\n\n            <div className='status__action-bar-dropdown'>\n              <DropdownMenuContainer\n                scrollKey={scrollKey}\n                status={lastStatus}\n                items={menu}\n                icon='ellipsis-h'\n                iconComponent={MoreHorizIcon}\n                size={18}\n                direction='right'\n                title={intl.formatMessage(messages.more)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </HotKeys>\n  );\n};\n\nConversation.propTypes = {\n  conversation: ImmutablePropTypes.map.isRequired,\n  scrollKey: PropTypes.string,\n  onMoveUp: PropTypes.func,\n  onMoveDown: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useRef, useMemo, useCallback } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport { expandConversations } from 'flavours/glitch/actions/conversations';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\n\nimport { Conversation } from './conversation';\n\nconst focusChild = (node, index, alignTop) => {\n  const element = node.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n  if (element) {\n    if (alignTop && node.scrollTop > element.offsetTop) {\n      element.scrollIntoView(true);\n    } else if (!alignTop && node.scrollTop + node.clientHeight < element.offsetTop + element.offsetHeight) {\n      element.scrollIntoView(false);\n    }\n\n    element.focus();\n  }\n};\n\nexport const ConversationsList = ({ scrollKey, ...other }) => {\n  const listRef = useRef();\n  const conversations = useSelector(state => state.getIn(['conversations', 'items']));\n  const isLoading = useSelector(state => state.getIn(['conversations', 'isLoading'], true));\n  const hasMore = useSelector(state => state.getIn(['conversations', 'hasMore'], false));\n  const dispatch = useDispatch();\n  const lastStatusId = conversations.last()?.get('last_status');\n\n  const handleMoveUp = useCallback(id => {\n    const elementIndex = conversations.findIndex(x => x.get('id') === id) - 1;\n    focusChild(listRef.current.node, elementIndex, true);\n  }, [listRef, conversations]);\n\n  const handleMoveDown = useCallback(id => {\n    const elementIndex = conversations.findIndex(x => x.get('id') === id) + 1;\n    focusChild(listRef.current.node, elementIndex, false);\n  }, [listRef, conversations]);\n\n  const debouncedLoadMore = useMemo(() => debounce(id => {\n    dispatch(expandConversations({ maxId: id }));\n  }, 300, { leading: true }), [dispatch]);\n\n  const handleLoadMore = useCallback(() => {\n    if (lastStatusId) {\n      debouncedLoadMore(lastStatusId);\n    }\n  }, [debouncedLoadMore, lastStatusId]);\n\n  return (\n    <ScrollableList {...other} scrollKey={scrollKey} isLoading={isLoading} showLoading={isLoading && conversations.isEmpty()} hasMore={hasMore} onLoadMore={handleLoadMore} ref={listRef}>\n      {conversations.map(item => (\n        <Conversation\n          key={item.get('id')}\n          conversation={item}\n          onMoveUp={handleMoveUp}\n          onMoveDown={handleMoveDown}\n          scrollKey={scrollKey}\n        />\n      ))}\n    </ScrollableList>\n  );\n};\n\nConversationsList.propTypes = {\n  scrollKey: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\n\nimport SettingText from '../../../components/setting_text';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div className='column-settings'>\n        <section>\n          <div className='column-settings__row'>\n            <SettingToggle settings={settings} settingPath={['conversations']} onChange={onChange} label={<FormattedMessage id='direct.group_by_conversations' defaultMessage='Group by conversation' />} />\n          </div>\n        </section>\n\n        <section>\n          <h3><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'direct']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (path, checked) {\n    dispatch(changeSetting(['direct', ...path], checked));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport MailIcon from '@/material-icons/400-24px/mail.svg?react';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { mountConversations, unmountConversations, expandConversations } from 'flavours/glitch/actions/conversations';\nimport { connectDirectStream } from 'flavours/glitch/actions/streaming';\nimport { expandDirectTimeline } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\n\nimport { ConversationsList } from './components/conversations_list';\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Private mentions' },\n});\n\nconst DirectTimeline = ({ columnId, multiColumn }) => {\n  const columnRef = useRef();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const pinned = !!columnId;\n\n  // glitch-soc additions\n  const hasUnread = useSelector(state => state.getIn(['timelines', 'direct', 'unread']) > 0);\n  const conversationsMode = useSelector(state => state.getIn(['settings', 'direct', 'conversations']));\n\n  const handlePin = useCallback(() => {\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  }, [dispatch, columnId]);\n\n  const handleMove = useCallback((dir) => {\n    dispatch(moveColumn(columnId, dir));\n  }, [dispatch, columnId]);\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current.scrollTop();\n  }, [columnRef]);\n\n  const handleLoadMoreTimeline = useCallback(maxId => {\n    dispatch(expandDirectTimeline({ maxId }));\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(mountConversations());\n\n    if (conversationsMode) {\n      dispatch(expandConversations());\n    } else {\n      dispatch(expandDirectTimeline());\n    }\n\n    const disconnect = dispatch(connectDirectStream());\n\n    return () => {\n      dispatch(unmountConversations());\n      disconnect();\n    };\n  }, [dispatch, conversationsMode]);\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='envelope'\n        iconComponent={MailIcon}\n        active={hasUnread}\n        title={intl.formatMessage(messages.title)}\n        onPin={handlePin}\n        onMove={handleMove}\n        onClick={handleHeaderClick}\n        pinned={pinned}\n        multiColumn={multiColumn}\n      >\n        <ColumnSettingsContainer />\n      </ColumnHeader>\n\n      {conversationsMode ? (\n        <ConversationsList\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any private mentions yet. When you send or receive one, it will show up here.\" />}\n          bindToDocument={!multiColumn}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          alwaysPrepend\n        />\n      ) : (\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          bindToDocument={!multiColumn}\n          onLoadMore={handleLoadMoreTimeline}\n          prepend={\n            <div className='follow_requests-unlocked_explanation'>\n              <span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span>\n            </div>\n          }\n          alwaysPrepend\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any private mentions yet. When you send or receive one, it will show up here.\" />}\n        />\n      )}\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nDirectTimeline.propTypes = {\n  columnId: PropTypes.string,\n  multiColumn: PropTypes.bool,\n};\n\nexport default DirectTimeline;\n"],"sourceRoot":""}