{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/getting_started/components/trends.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/getting_started/containers/trends_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/getting_started/index.jsx"],"names":["Trends","ImmutablePureComponent","componentDidMount","this","props","fetchTrends","refreshInterval","setInterval","componentWillUnmount","clearInterval","render","trends","isEmpty","_jsx","className","Link","to","FormattedMessage","id","defaultMessage","take","map","hashtag","Hashtag","get","_defineProperty","loading","ImmutablePropTypes","list","PropTypes","func","isRequired","connect","state","getIn","dispatch","fetchTrendingHashtags","messages","defineMessages","home_timeline","notifications","public_timeline","settings_subheading","community_timeline","explore","direct","bookmarks","preferences","follow_requests","favourites","blocks","domain_blocks","mutes","pins","lists","discover","personal","security","menu","GettingStarted","fetchFollowRequests","signedIn","identity","intl","myAccount","multiColumn","unreadFollowRequests","navItems","badgeDisplay","number","limit","push","ColumnSubheading","text","formatMessage","showTrends","ColumnLink","icon","iconComponent","ExploreIcon","PeopleIcon","PublicIcon","HomeIcon","AlternateEmailIcon","BookmarksIcon","StarIcon","ListAltIcon","PersonAddIcon","badge","concat","SettingsIcon","href","Column","NavigationBar","ColumnHeader","title","MenuIcon","LinkFooter","TrendsContainer","Helmet","name","content","identityContextPropShape","object","record","bool","unreadNotifications","withIdentity","me","ImmutableList","size","injectIntl"],"mappings":"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","file":"js/features/getting_started.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\n\nexport default class Trends extends ImmutablePureComponent {\n\n  static defaultProps = {\n    loading: false,\n  };\n\n  static propTypes = {\n    trends: ImmutablePropTypes.list,\n    fetchTrends: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    this.props.fetchTrends();\n    this.refreshInterval = setInterval(() => this.props.fetchTrends(), 900 * 1000);\n  }\n\n  componentWillUnmount () {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n\n  render () {\n    const { trends } = this.props;\n\n    if (!trends || trends.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div className='getting-started__trends'>\n        <h4>\n          <Link to={'/explore/tags'}>\n            <FormattedMessage id='trends.trending_now' defaultMessage='Trending now' />\n          </Link>\n        </h4>\n\n        {trends.take(3).map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\n\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\n\nimport Trends from '../components/trends';\n\nconst mapStateToProps = state => ({\n  trends: state.getIn(['trends', 'tags', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchTrends: () => dispatch(fetchTrendingHashtags()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trends);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport AlternateEmailIcon from '@/material-icons/400-24px/alternate_email.svg?react';\nimport BookmarksIcon from '@/material-icons/400-24px/bookmarks-fill.svg?react';\nimport ExploreIcon from '@/material-icons/400-24px/explore.svg?react';\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport HomeIcon from '@/material-icons/400-24px/home-fill.svg?react';\nimport ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\nimport MenuIcon from '@/material-icons/400-24px/menu.svg?react';\nimport PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';\nimport PublicIcon from '@/material-icons/400-24px/public.svg?react';\nimport SettingsIcon from '@/material-icons/400-24px/settings-fill.svg?react';\nimport StarIcon from '@/material-icons/400-24px/star.svg?react';\nimport { fetchFollowRequests } from 'mastodon/actions/accounts';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport LinkFooter from 'mastodon/features/ui/components/link_footer';\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\n\nimport { me, showTrends } from '../../initial_state';\nimport { NavigationBar } from '../compose/components/navigation_bar';\nimport ColumnLink from '../ui/components/column_link';\nimport ColumnSubheading from '../ui/components/column_subheading';\n\nimport TrendsContainer from './containers/trends_container';\n\nconst messages = defineMessages({\n  home_timeline: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n  notifications: { id: 'tabs_bar.notifications', defaultMessage: 'Notifications' },\n  public_timeline: { id: 'navigation_bar.public_timeline', defaultMessage: 'Federated timeline' },\n  settings_subheading: { id: 'column_subheading.settings', defaultMessage: 'Settings' },\n  community_timeline: { id: 'navigation_bar.community_timeline', defaultMessage: 'Local timeline' },\n  explore: { id: 'navigation_bar.explore', defaultMessage: 'Explore' },\n  direct: { id: 'navigation_bar.direct', defaultMessage: 'Private mentions' },\n  bookmarks: { id: 'navigation_bar.bookmarks', defaultMessage: 'Bookmarks' },\n  preferences: { id: 'navigation_bar.preferences', defaultMessage: 'Preferences' },\n  follow_requests: { id: 'navigation_bar.follow_requests', defaultMessage: 'Follow requests' },\n  favourites: { id: 'navigation_bar.favourites', defaultMessage: 'Favorites' },\n  blocks: { id: 'navigation_bar.blocks', defaultMessage: 'Blocked users' },\n  domain_blocks: { id: 'navigation_bar.domain_blocks', defaultMessage: 'Blocked domains' },\n  mutes: { id: 'navigation_bar.mutes', defaultMessage: 'Muted users' },\n  pins: { id: 'navigation_bar.pins', defaultMessage: 'Pinned posts' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  discover: { id: 'navigation_bar.discover', defaultMessage: 'Discover' },\n  personal: { id: 'navigation_bar.personal', defaultMessage: 'Personal' },\n  security: { id: 'navigation_bar.security', defaultMessage: 'Security' },\n  menu: { id: 'getting_started.heading', defaultMessage: 'Getting started' },\n});\n\nconst mapStateToProps = state => ({\n  myAccount: state.getIn(['accounts', me]),\n  unreadFollowRequests: state.getIn(['user_lists', 'follow_requests', 'items'], ImmutableList()).size,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchFollowRequests: () => dispatch(fetchFollowRequests()),\n});\n\nconst badgeDisplay = (number, limit) => {\n  if (number === 0) {\n    return undefined;\n  } else if (limit && number >= limit) {\n    return `${limit}+`;\n  } else {\n    return number;\n  }\n};\n\nclass GettingStarted extends ImmutablePureComponent {\n  static propTypes = {\n    identity: identityContextPropShape,\n    intl: PropTypes.object.isRequired,\n    myAccount: ImmutablePropTypes.record,\n    multiColumn: PropTypes.bool,\n    fetchFollowRequests: PropTypes.func.isRequired,\n    unreadFollowRequests: PropTypes.number,\n    unreadNotifications: PropTypes.number,\n  };\n\n  componentDidMount () {\n    const { fetchFollowRequests } = this.props;\n    const { signedIn } = this.props.identity;\n\n    if (!signedIn) {\n      return;\n    }\n\n    fetchFollowRequests();\n  }\n\n  render () {\n    const { intl, myAccount, multiColumn, unreadFollowRequests } = this.props;\n    const { signedIn } = this.props.identity;\n\n    const navItems = [];\n\n    navItems.push(\n      <ColumnSubheading key='header-discover' text={intl.formatMessage(messages.discover)} />,\n    );\n\n    if (showTrends) {\n      navItems.push(\n        <ColumnLink key='explore' icon='explore' iconComponent={ExploreIcon} text={intl.formatMessage(messages.explore)} to='/explore' />,\n      );\n    }\n\n    navItems.push(\n      <ColumnLink key='community_timeline' icon='users' iconComponent={PeopleIcon} text={intl.formatMessage(messages.community_timeline)} to='/public/local' />,\n      <ColumnLink key='public_timeline' icon='globe' iconComponent={PublicIcon} text={intl.formatMessage(messages.public_timeline)} to='/public' />,\n    );\n\n    if (signedIn) {\n      navItems.push(\n        <ColumnSubheading key='header-personal' text={intl.formatMessage(messages.personal)} />,\n        <ColumnLink key='home' icon='home' iconComponent={HomeIcon} text={intl.formatMessage(messages.home_timeline)} to='/home' />,\n        <ColumnLink key='direct' icon='at' iconComponent={AlternateEmailIcon} text={intl.formatMessage(messages.direct)} to='/conversations' />,\n        <ColumnLink key='bookmark' icon='bookmarks' iconComponent={BookmarksIcon} text={intl.formatMessage(messages.bookmarks)} to='/bookmarks' />,\n        <ColumnLink key='favourites' icon='star' iconComponent={StarIcon} text={intl.formatMessage(messages.favourites)} to='/favourites' />,\n        <ColumnLink key='lists' icon='list-ul' iconComponent={ListAltIcon} text={intl.formatMessage(messages.lists)} to='/lists' />,\n      );\n\n      if (myAccount.get('locked') || unreadFollowRequests > 0) {\n        navItems.push(<ColumnLink key='follow_requests' icon='user-plus' iconComponent={PersonAddIcon} text={intl.formatMessage(messages.follow_requests)} badge={badgeDisplay(unreadFollowRequests, 40)} to='/follow_requests' />);\n      }\n\n      navItems.push(\n        <ColumnSubheading key='header-settings' text={intl.formatMessage(messages.settings_subheading)} />,\n        <ColumnLink key='preferences' icon='cog' iconComponent={SettingsIcon} text={intl.formatMessage(messages.preferences)} href='/settings/preferences' />,\n      );\n    }\n\n    return (\n      <Column>\n        {(signedIn && !multiColumn) ? <NavigationBar /> : <ColumnHeader title={intl.formatMessage(messages.menu)} icon='bars' iconComponent={MenuIcon} multiColumn={multiColumn} />}\n\n        <div className='getting-started scrollable scrollable--flex'>\n          <div className='getting-started__wrapper'>\n            {navItems}\n          </div>\n\n          {!multiColumn && <div className='flex-spacer' />}\n\n          <LinkFooter multiColumn />\n        </div>\n\n        {(multiColumn && showTrends) && <TrendsContainer />}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.menu)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default withIdentity(connect(mapStateToProps, mapDispatchToProps)(injectIntl(GettingStarted)));\n"],"sourceRoot":""}