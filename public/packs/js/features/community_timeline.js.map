{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/community_timeline/components/column_settings.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/community_timeline/containers/column_settings_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/community_timeline/index.jsx"],"names":["ColumnSettings","PureComponent","render","settings","onChange","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","id","defaultMessage","injectIntl","connect","mapStateToProps","state","_ref","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","messages","defineMessages","title","CommunityTimeline","constructor","arguments","_defineProperty","onlyMedia","removeColumn","addColumn","other","dir","moveColumn","column","scrollTop","maxId","expandCommunityTimeline","componentDidMount","signedIn","identity","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","intl","hasUnread","multiColumn","pinned","_jsxs","Column","bindToDocument","ref","setRef","formatMessage","children","ColumnHeader","icon","iconComponent","PeopleIcon","active","onPin","handlePin","onMove","handleMove","onClick","handleHeaderClick","ColumnSettingsContainer","StatusListContainer","prepend","DismissableBanner","values","domain","trackScroll","scrollKey","concat","timelineId","onLoadMore","handleLoadMore","emptyMessage","Helmet","name","content","withIdentity","timelineState"],"mappings":"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","file":"js/features/community_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div className='column-settings'>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from '../../../actions/columns';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\nimport { domain } from 'mastodon/initial_state';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { connectCommunityStream } from '../../actions/streaming';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n  };\n};\n\nclass CommunityTimeline extends PureComponent {\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    identity: identityContextPropShape,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n    const { signedIn } = this.props.identity;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.props.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          iconComponent={PeopleIcon}\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={<DismissableBanner id='community_timeline'><FormattedMessage id='dismissable_banner.community_timeline' defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.' values={{ domain }} /></DismissableBanner>}\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default withIdentity(connect(mapStateToProps)(injectIntl(CommunityTimeline)));\n"],"sourceRoot":""}