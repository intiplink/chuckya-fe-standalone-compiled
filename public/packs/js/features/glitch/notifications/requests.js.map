{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/notification_request.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/flavours/glitch/features/notifications/requests.jsx"],"names":["getAccount","makeGetAccount","messages","defineMessages","accept","id","defaultMessage","dismiss","NotificationRequest","_ref","accountId","notificationsCount","dispatch","useDispatch","account","useSelector","state","intl","useIntl","handleDismiss","useCallback","dismissNotificationRequest","handleAccept","acceptNotificationRequest","_jsx","className","Link","to","concat","Avatar","size","counter","toCappedNumber","dangerouslySetInnerHTML","__html","get","IconButton","iconComponent","DeleteIcon","onClick","title","formatMessage","DoneIcon","maximize","ColumnSettings","settings","onChange","key","checked","changeSetting","SettingToggle","prefix","settingPath","label","FormattedMessage","PolicyControls","NotificationRequests","multiColumn","columnRef","useRef","isLoading","getIn","notificationRequests","hasMore","handleHeaderClick","_columnRef$current","current","scrollTop","handleLoadMore","expandNotificationRequests","useEffect","fetchNotificationRequests","_jsxs","Column","bindToDocument","ref","children","ColumnHeader","icon","InventoryIcon","showBackButton","ScrollableList","scrollKey","trackScroll","showLoading","onLoadMore","emptyMessage","map","request","Helmet","name","content"],"mappings":"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","file":"js/features/glitch/notifications/requests.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport DeleteIcon from '@/material-icons/400-24px/delete.svg?react';\nimport DoneIcon from '@/material-icons/400-24px/done.svg?react';\nimport { acceptNotificationRequest, dismissNotificationRequest } from 'flavours/glitch/actions/notifications';\nimport { Avatar } from 'flavours/glitch/components/avatar';\nimport { IconButton } from 'flavours/glitch/components/icon_button';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport { toCappedNumber } from 'flavours/glitch/utils/numbers';\n\nconst getAccount = makeGetAccount();\n\nconst messages = defineMessages({\n  accept: { id: 'notification_requests.accept', defaultMessage: 'Accept' },\n  dismiss: { id: 'notification_requests.dismiss', defaultMessage: 'Dismiss' },\n});\n\nexport const NotificationRequest = ({ id, accountId, notificationsCount }) => {\n  const dispatch = useDispatch();\n  const account = useSelector(state => getAccount(state, accountId));\n  const intl = useIntl();\n\n  const handleDismiss = useCallback(() => {\n    dispatch(dismissNotificationRequest(id));\n  }, [dispatch, id]);\n\n  const handleAccept = useCallback(() => {\n    dispatch(acceptNotificationRequest(id));\n  }, [dispatch, id]);\n\n  return (\n    <div className='notification-request'>\n      <Link to={`/notifications/requests/${id}`} className='notification-request__link'>\n        <Avatar account={account} size={40} counter={toCappedNumber(notificationsCount)} />\n\n        <div className='notification-request__name'>\n          <div className='notification-request__name__display-name'>\n            <bdi><strong dangerouslySetInnerHTML={{ __html: account?.get('display_name_html') }} /></bdi>\n          </div>\n\n          <span>@{account?.get('acct')}</span>\n        </div>\n      </Link>\n\n      <div className='notification-request__actions'>\n        <IconButton iconComponent={DeleteIcon} onClick={handleDismiss} title={intl.formatMessage(messages.dismiss)} />\n        <IconButton iconComponent={DoneIcon} onClick={handleAccept} title={intl.formatMessage(messages.accept)} />\n      </div>\n    </div>\n  );\n};\n\nNotificationRequest.propTypes = {\n  id: PropTypes.string.isRequired,\n  accountId: PropTypes.string.isRequired,\n  notificationsCount: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport InventoryIcon from '@/material-icons/400-24px/inventory_2.svg?react';\nimport { fetchNotificationRequests, expandNotificationRequests } from 'flavours/glitch/actions/notifications';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\n\nimport { NotificationRequest } from './components/notification_request';\nimport { PolicyControls } from './components/policy_controls';\nimport SettingToggle from './components/setting_toggle';\n\nconst messages = defineMessages({\n  title: { id: 'notification_requests.title', defaultMessage: 'Filtered notifications' },\n  maximize: { id: 'notification_requests.maximize', defaultMessage: 'Maximize' }\n});\n\nconst ColumnSettings = () => {\n  const dispatch = useDispatch();\n  const settings = useSelector((state) => state.settings.get('notifications'));\n\n  const onChange = useCallback(\n    (key, checked) => {\n      dispatch(changeSetting(['notifications', ...key], checked));\n    },\n    [dispatch],\n  );\n\n  return (\n    <div className='column-settings'>\n      <section>\n        <div className='column-settings__row'>\n          <SettingToggle\n            prefix='notifications'\n            settings={settings}\n            settingPath={['minimizeFilteredBanner']}\n            onChange={onChange}\n            label={\n              <FormattedMessage id='notification_requests.minimize_banner' defaultMessage='Minimize filtred notifications banner' />\n            }\n          />\n        </div>\n      </section>\n\n      <PolicyControls />\n    </div>\n  );\n};\n\nexport const NotificationRequests = ({ multiColumn }) => {\n  const columnRef = useRef();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.getIn(['notificationRequests', 'isLoading']));\n  const notificationRequests = useSelector(state => state.getIn(['notificationRequests', 'items']));\n  const hasMore = useSelector(state => !!state.getIn(['notificationRequests', 'next']));\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current?.scrollTop();\n  }, [columnRef]);\n\n  const handleLoadMore = useCallback(() => {\n    dispatch(expandNotificationRequests());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchNotificationRequests());\n  }, [dispatch]);\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='archive'\n        iconComponent={InventoryIcon}\n        title={intl.formatMessage(messages.title)}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n        showBackButton\n      >\n        <ColumnSettings />\n      </ColumnHeader>\n\n      <ScrollableList\n        scrollKey='notification_requests'\n        trackScroll={!multiColumn}\n        bindToDocument={!multiColumn}\n        isLoading={isLoading}\n        showLoading={isLoading && notificationRequests.size === 0}\n        hasMore={hasMore}\n        onLoadMore={handleLoadMore}\n        emptyMessage={<FormattedMessage id='empty_column.notification_requests' defaultMessage='All clear! There is nothing here. When you receive new notifications, they will appear here according to your settings.' />}\n      >\n        {notificationRequests.map(request => (\n          <NotificationRequest\n            key={request.get('id')}\n            id={request.get('id')}\n            accountId={request.get('account')}\n            notificationsCount={request.get('notifications_count')}\n          />\n        ))}\n      </ScrollableList>\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nNotificationRequests.propTypes = {\n  multiColumn: PropTypes.bool,\n};\n\nexport default NotificationRequests;\n"],"sourceRoot":""}