{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/components/domain.tsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/domain_blocks/index.jsx"],"names":["messages","defineMessages","unblockDomain","id","defaultMessage","Domain","_ref","domain","intl","useIntl","dispatch","useAppDispatch","handleDomainUnblock","useCallback","_jsx","className","IconButton","active","icon","iconComponent","LockOpenIcon","title","formatMessage","onClick","heading","Blocks","ImmutablePureComponent","constructor","arguments","_defineProperty","_debounce","this","props","expandDomainBlocks","leading","UNSAFE_componentWillMount","fetchDomainBlocks","render","domains","hasMore","multiColumn","Column","LoadingIndicator","emptyMessage","FormattedMessage","bindToDocument","BlockIcon","alwaysShowBackButton","ScrollableList","scrollKey","onLoadMore","handleLoadMore","map","Helmet","name","content","params","PropTypes","object","isRequired","func","bool","ImmutablePropTypes","orderedSet","connect","state","getIn","injectIntl"],"mappings":"4RAUA,MAAMA,EAAWC,YAAe,CAC9BC,cAAe,CACbC,GAAG,yBACHC,eAAe,6BAINC,EAERC,IAAiB,IAAhB,OAAEC,GAAQD,EACd,MAAME,EAAOC,cACPC,EAAWC,cAEXC,EAAsBC,uBAAY,KACtCH,EAASR,YAAcK,GAAQ,GAC9B,CAACG,EAAUH,IAEd,OACEO,YAAA,OAAKC,UAAU,eAAQ,EACrBD,YAAA,OAAKC,UAAU,wBAAiB,EAC9BD,YAAA,QAAMC,UAAU,4BAAqB,EACnCD,YAAA,mBAASP,IAGXO,YAAA,OAAKC,UAAU,wBAAiB,EAC9BD,YAACE,IAAU,CACTC,QAAM,EACNC,KAAK,SACLC,cAAeC,IACfC,MAAOb,EAAKc,cAActB,EAASE,cAAe,CAAEK,WACpDgB,QAASX,MAIX,E,iCCxBV,MAAMZ,EAAWC,YAAe,CAC9BuB,QAAS,CAAErB,GAAG,uBAAyBC,eAAe,qBAQxD,MAAMqB,UAAeC,IAAuBC,cAAA,SAAAC,WAAAC,YAAA,sBAezBC,KAAS,KACxBC,KAAKC,MAAMtB,SAASuB,cAAqB,GACxC,IAAK,CAAEC,SAAS,IAAO,CAN1BC,4BACEJ,KAAKC,MAAMtB,SAAS0B,cACtB,CAMAC,SACE,MAAM,KAAE7B,EAAI,QAAE8B,EAAO,QAAEC,EAAO,YAAEC,GAAgBT,KAAKC,MAErD,IAAKM,EACH,OACExB,YAAC2B,IAAM,UACL3B,YAAC4B,IAAgB,KAKvB,MAAMC,EAAe7B,YAAC8B,IAAgB,CAACzC,GAAE,6BAA8BC,eAAe,sCAEtF,OACEU,YAAC2B,IAAM,CAACI,gBAAiBL,EAAatB,KAAK,MAAMC,cAAe2B,IAAWtB,QAAShB,EAAKc,cAActB,EAASwB,SAAUuB,sBAAoB,UAC5IjC,YAACkC,IAAc,CACbC,UAAU,gBACVC,WAAYnB,KAAKoB,eACjBZ,QAASA,EACTI,aAAcA,EACdE,gBAAiBL,QAAY,EAE5BF,EAAQc,KAAI7C,GACXO,YAACT,EAAM,CAAcE,OAAQA,GAAhBA,MAIjBO,YAACuC,IAAM,UACLvC,YAAA,QAAMwC,KAAK,SAASC,QAAQ,aAIpC,EAED1B,YArDKJ,EAAM,YAES,CACjB+B,OAAQC,IAAUC,OAAOC,WACzBjD,SAAU+C,IAAUG,KAAKD,WACzBpB,QAASkB,IAAUI,KACnBvB,QAASwB,IAAmBC,WAC5BvD,KAAMiD,IAAUC,OAAOC,WACvBnB,YAAaiB,IAAUI,OA+CZG,6BA5DSC,IAAK,CAC3B3B,QAAS2B,EAAMC,MAAM,CAAC,eAAgB,SAAU,UAChD3B,UAAW0B,EAAMC,MAAM,CAAC,eAAgB,SAAU,YA0DrCF,CAAyBG,YAAW1C,G","file":"js/features/domain_blocks.js","sourcesContent":["import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport LockOpenIcon from '@/material-icons/400-24px/lock_open.svg?react';\nimport { unblockDomain } from 'mastodon/actions/domain_blocks';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport { IconButton } from './icon_button';\n\nconst messages = defineMessages({\n  unblockDomain: {\n    id: 'account.unblock_domain',\n    defaultMessage: 'Unblock domain {domain}',\n  },\n});\n\nexport const Domain: React.FC<{\n  domain: string;\n}> = ({ domain }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  const handleDomainUnblock = useCallback(() => {\n    dispatch(unblockDomain(domain));\n  }, [dispatch, domain]);\n\n  return (\n    <div className='domain'>\n      <div className='domain__wrapper'>\n        <span className='domain__domain-name'>\n          <strong>{domain}</strong>\n        </span>\n\n        <div className='domain__buttons'>\n          <IconButton\n            active\n            icon='unlock'\n            iconComponent={LockOpenIcon}\n            title={intl.formatMessage(messages.unblockDomain, { domain })}\n            onClick={handleDomainUnblock}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport BlockIcon from '@/material-icons/400-24px/block-fill.svg?react';\nimport { Domain } from 'mastodon/components/domain';\n\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport Column from '../ui/components/column';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Blocked domains' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['domain_lists', 'blocks', 'next']),\n});\n\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  UNSAFE_componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, hasMore, multiColumn } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no blocked domains yet.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='ban' iconComponent={BlockIcon} heading={intl.formatMessage(messages.heading)} alwaysShowBackButton>\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {domains.map(domain =>\n            <Domain key={domain} domain={domain} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Blocks));\n"],"sourceRoot":""}