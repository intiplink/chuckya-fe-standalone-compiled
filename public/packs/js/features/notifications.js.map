{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/components/filtered_notifications_banner.tsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/components/notifications_permission_banner.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/components/checkbox_with_label.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/components/clear_column_button.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/components/grant_permission_button.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/components/column_settings.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/containers/column_settings_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/components/filter_bar.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/containers/filter_bar_container.js","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/notifications/index.jsx"],"names":["FilteredNotificationsBanner","dispatch","useAppDispatch","policy","useAppSelector","state","notificationPolicy","useEffect","fetchNotificationPolicy","interval","setInterval","clearInterval","summary","pending_notifications_count","_jsx","Link","className","to","Icon","icon","InventoryIcon","id","FormattedMessage","defaultMessage","values","count","pending_requests_count","toCappedNumber","messages","defineMessages","close","NotificationsPermissionBanner","PureComponent","constructor","arguments","_defineProperty","this","props","requestBrowserPermission","changeSetting","render","intl","IconButton","iconComponent","CloseIcon","onClick","handleClose","title","formatMessage","SettingsIcon","Button","handleClick","connect","injectIntl","CheckboxWithLabel","_ref","checked","disabled","children","onChange","handleChange","useCallback","_ref2","target","Toggle","ClearColumnButton","tabIndex","DeleteForeverIcon","GrantPermissionButton","ColumnSettings","path","onChangePolicy","settings","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","filterAdvancedStr","unreadMarkersShowStr","alertStr","showStr","soundStr","showPushSettings","get","pushStr","filter_not_following","handleFilterNotFollowing","filter_not_followers","handleFilterNotFollowers","days","filter_new_accounts","handleFilterNewAccounts","filter_private_mentions","handleFilterPrivateMentions","role","SettingToggle","prefix","settingPath","label","onPushChange","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","withIdentity","clearMessage","clearConfirm","permissionDenied","getIn","includes","mapDispatchToProps","window","Notification","permission","changePushNotifications","slice","showAlert","message","setFilter","openModal","modalType","modalProps","confirm","onConfirm","clearNotifications","param","updateNotificationsPolicy","tooltips","mentions","favourites","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","ReplyAllIcon","StarIcon","RepeatIcon","InsertChartIcon","HomeIcon","PersonAddIcon","newActiveFilter","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","filter","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","maxId","expandNotifications","_debounce","last","leading","loadPending","scrollTopNotifications","columnId","removeColumn","addColumn","dir","moveColumn","column","scrollTop","c","elementIndex","findIndex","_selectChild","markNotificationsAsRead","submitMarkers","immediate","UNSAFE_componentWillMount","mountNotifications","componentWillUnmount","handleLoadOlder","cancel","handleScrollToTop","handleScroll","unmountNotifications","index","align_top","container","node","element","querySelector","concat","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","isLoading","isUnread","multiColumn","hasMore","numPending","lastReadId","canMarkAsRead","needsNotificationPermission","pinned","emptyMessage","signedIn","scrollableContent","filterBarContainer","FilterBarContainer","scrollContainer","size","map","LoadGap","handleLoadGap","NotificationContainer","notification","accountId","onMoveUp","handleMoveUp","onMoveDown","handleMoveDown","unread","compareId","ScrollableList","scrollKey","trackScroll","showLoading","prepend","alwaysPrepend","onLoadMore","onLoadPending","handleLoadPending","onScrollToTop","onScroll","bindToDocument","NotSignedInIndicator","extraButton","handleMarkAsRead","DoneAllIcon","_jsxs","Column","ref","setColumnRef","ColumnHeader","NotificationsIcon","active","onPin","handlePin","onMove","handleMove","handleHeaderClick","ColumnSettingsContainer","Helmet","name","content","some"],"mappings":"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","file":"js/features/notifications.js","sourcesContent":["import { useEffect } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport InventoryIcon from '@/material-icons/400-24px/inventory_2.svg?react';\nimport { fetchNotificationPolicy } from 'mastodon/actions/notification_policies';\nimport { Icon } from 'mastodon/components/icon';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\nimport { toCappedNumber } from 'mastodon/utils/numbers';\n\nexport const FilteredNotificationsBanner: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const policy = useAppSelector((state) => state.notificationPolicy);\n\n  useEffect(() => {\n    void dispatch(fetchNotificationPolicy());\n\n    const interval = setInterval(() => {\n      void dispatch(fetchNotificationPolicy());\n    }, 120000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n\n  if (policy === null || policy.summary.pending_notifications_count === 0) {\n    return null;\n  }\n\n  return (\n    <Link\n      className='filtered-notifications-banner'\n      to='/notifications/requests'\n    >\n      <Icon icon={InventoryIcon} id='filtered-notifications' />\n\n      <div className='filtered-notifications-banner__text'>\n        <strong>\n          <FormattedMessage\n            id='filtered_notifications_banner.title'\n            defaultMessage='Filtered notifications'\n          />\n        </strong>\n        <span>\n          <FormattedMessage\n            id='filtered_notifications_banner.pending_requests'\n            defaultMessage='Notifications from {count, plural, =0 {no one} one {one person} other {# people}} you may know'\n            values={{ count: policy.summary.pending_requests_count }}\n          />\n        </span>\n      </div>\n\n      <div className='filtered-notifications-banner__badge'>\n        <div className='filtered-notifications-banner__badge__badge'>\n          {toCappedNumber(policy.summary.pending_notifications_count)}\n        </div>\n        <FormattedMessage\n          id='filtered_notifications_banner.mentions'\n          defaultMessage='{count, plural, one {mention} other {mentions}}'\n          values={{ count: policy.summary.pending_notifications_count }}\n        />\n      </div>\n    </Link>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport SettingsIcon from '@/material-icons/400-20px/settings.svg?react';\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { Button } from 'mastodon/components/button';\nimport { Icon }  from 'mastodon/components/icon';\nimport { IconButton } from 'mastodon/components/icon_button';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nclass NotificationsPermissionBanner extends PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  };\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  };\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' iconComponent={CloseIcon} onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' icon={SettingsIcon} /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n\nexport default connect()(injectIntl(NotificationsPermissionBanner));\n","import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\n\nimport Toggle from 'react-toggle';\n\nexport const CheckboxWithLabel = ({ checked, disabled, children, onChange }) => {\n  const handleChange = useCallback(({ target }) => {\n    onChange(target.checked);\n  }, [onChange]);\n\n  return (\n    <label className='app-form__toggle'>\n      <div className='app-form__toggle__label'>\n        {children}\n      </div>\n\n      <div className='app-form__toggle__toggle'>\n        <div>\n          <Toggle checked={checked} onChange={handleChange} disabled={disabled} />\n        </div>\n      </div>\n    </label>\n  );\n};\n\nCheckboxWithLabel.propTypes = {\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  children: PropTypes.children,\n  onChange: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport DeleteForeverIcon from '@/material-icons/400-24px/delete_forever.svg?react';\nimport { Icon }  from 'mastodon/components/icon';\n\nexport default class ClearColumnButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.props.onClick}><Icon id='eraser' icon={DeleteForeverIcon} /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex={0} onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'mastodon/permissions';\n\nimport { CheckboxWithLabel } from './checkbox_with_label';\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport SettingToggle from './setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n  static propTypes = {\n    identity: identityContextPropShape,\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n    notificationPolicy: PropTypes.object.isRequired,\n    onChangePolicy: PropTypes.func.isRequired,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  };\n\n  handleFilterNotFollowing = checked => {\n    this.props.onChangePolicy('filter_not_following', checked);\n  };\n\n  handleFilterNotFollowers = checked => {\n    this.props.onChangePolicy('filter_not_followers', checked);\n  };\n\n  handleFilterNewAccounts = checked => {\n    this.props.onChangePolicy('filter_new_accounts', checked);\n  };\n\n  handleFilterPrivateMentions = checked => {\n    this.props.onChangePolicy('filter_private_mentions', checked);\n  };\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission, notificationPolicy } = this.props;\n\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div className='column-settings'>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n        )}\n\n        <section>\n          <ClearColumnButton onClick={onClear} />\n        </section>\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <section>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </section>\n        )}\n\n        <section>\n          <h3><FormattedMessage id='notifications.policy.title' defaultMessage='Filter out notifications from…' /></h3>\n\n          <div className='column-settings__row'>\n            <CheckboxWithLabel checked={notificationPolicy.filter_not_following} onChange={this.handleFilterNotFollowing}>\n              <strong><FormattedMessage id='notifications.policy.filter_not_following_title' defaultMessage=\"People you don't follow\" /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_not_following_hint' defaultMessage='Until you manually approve them' /></span>\n            </CheckboxWithLabel>\n\n            <CheckboxWithLabel checked={notificationPolicy.filter_not_followers} onChange={this.handleFilterNotFollowers}>\n              <strong><FormattedMessage id='notifications.policy.filter_not_followers_title' defaultMessage='People not following you' /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_not_followers_hint' defaultMessage='Including people who have been following you fewer than {days, plural, one {one day} other {# days}}' values={{ days: 3 }} /></span>\n            </CheckboxWithLabel>\n\n            <CheckboxWithLabel checked={notificationPolicy.filter_new_accounts} onChange={this.handleFilterNewAccounts}>\n              <strong><FormattedMessage id='notifications.policy.filter_new_accounts_title' defaultMessage='New accounts' /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_new_accounts.hint' defaultMessage='Created within the past {days, plural, one {one day} other {# days}}' values={{ days: 30 }} /></span>\n            </CheckboxWithLabel>\n\n            <CheckboxWithLabel checked={notificationPolicy.filter_private_mentions} onChange={this.handleFilterPrivateMentions}>\n              <strong><FormattedMessage id='notifications.policy.filter_private_mentions_title' defaultMessage='Unsolicited private mentions' /></strong>\n              <span className='hint'><FormattedMessage id='notifications.policy.filter_private_mentions_hint' defaultMessage=\"Filtered unless it's in reply to your own mention or if you follow the sender\" /></span>\n            </CheckboxWithLabel>\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-unread-markers'>\n          <h3 id='notifications-unread-markers'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-filter-bar'>\n          <h3 id='notifications-filter-bar'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='advanced-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-follow'>\n          <h3 id='notifications-follow'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-follow-request'>\n          <h3 id='notifications-follow-request'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-favourite'>\n          <h3 id='notifications-favourite'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favorites:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-mention'>\n          <h3 id='notifications-mention'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-reblog'>\n          <h3 id='notifications-reblog'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-poll'>\n          <h3 id='notifications-poll'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-status'>\n          <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-update'>\n          <h3 id='notifications-update'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        {((this.props.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <section role='group' aria-labelledby='notifications-admin-sign-up'>\n            <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></h3>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </section>\n        )}\n\n        {((this.props.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <section role='group' aria-labelledby='notifications-admin-report'>\n            <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></h3>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </section>\n        )}\n      </div>\n    );\n  }\n\n}\n\nexport default withIdentity(ColumnSettings);\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { showAlert } from '../../../actions/alerts';\nimport { openModal } from '../../../actions/modal';\nimport { updateNotificationsPolicy } from '../../../actions/notification_policies';\nimport { setFilter, clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\n/**\n * @param {import('mastodon/store').RootState} state\n */\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n  notificationPolicy: state.notificationPolicy,\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.clearMessage),\n        confirm: intl.formatMessage(messages.clearConfirm),\n        onConfirm: () => dispatch(clearNotifications()),\n      },\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n  onChangePolicy (param, checked) {\n    dispatch(updateNotificationsPolicy({\n      [param]: checked,\n    }));\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport HomeIcon from '@/material-icons/400-24px/home-fill.svg?react';\nimport InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';\nimport PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';\nimport RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';\nimport ReplyAllIcon from '@/material-icons/400-24px/reply_all.svg?react';\nimport StarIcon from '@/material-icons/400-24px/star.svg?react';\nimport { Icon }  from 'mastodon/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favorites' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nclass FilterBar extends PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' icon={ReplyAllIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' icon={StarIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' icon={RepeatIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' icon={InsertChartIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' icon={HomeIcon} />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' icon={PersonAddIcon} />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n\nexport default injectIntl(FilterBar);\n","import { connect } from 'react-redux';\n\nimport { setFilter } from '../../../actions/notifications';\nimport FilterBar from '../components/filter_bar';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport DoneAllIcon from '@/material-icons/400-24px/done_all.svg?react';\nimport NotificationsIcon from '@/material-icons/400-24px/notifications-fill.svg?react';\nimport { compareId } from 'mastodon/compare_id';\nimport { Icon }  from 'mastodon/components/icon';\nimport { NotSignedInIndicator } from 'mastodon/components/not_signed_in_indicator';\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { submitMarkers } from '../../actions/markers';\nimport {\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from '../../actions/notifications';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { LoadGap } from '../../components/load_gap';\nimport ScrollableList from '../../components/scrollable_list';\n\nimport { FilteredNotificationsBanner } from './components/filtered_notifications_banner';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport NotificationContainer from './containers/notification_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], 0) > 0,\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\nclass Notifications extends PureComponent {\n  static propTypes = {\n    identity: identityContextPropShape,\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  UNSAFE_componentWillMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setColumnRef = c => {\n    this.column = c;\n  };\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n    const { signedIn } = this.props.identity;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = signedIn\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    let scrollContainer;\n\n    if (signedIn) {\n      scrollContainer = (\n        <ScrollableList\n          scrollKey={`notifications-${columnId}`}\n          trackScroll={!pinned}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          numPending={numPending}\n          prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n          alwaysPrepend\n          emptyMessage={emptyMessage}\n          onLoadMore={this.handleLoadOlder}\n          onLoadPending={this.handleLoadPending}\n          onScrollToTop={this.handleScrollToTop}\n          onScroll={this.handleScroll}\n          bindToDocument={!multiColumn}\n        >\n          {scrollableContent}\n        </ScrollableList>\n      );\n    } else {\n      scrollContainer = <NotSignedInIndicator />;\n    }\n\n    let extraButton = null;\n\n    if (canMarkAsRead) {\n      extraButton = (\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='done-all' icon={DoneAllIcon} />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='bell'\n          iconComponent={NotificationsIcon}\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={extraButton}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {filterBarContainer}\n\n        <FilteredNotificationsBanner />\n\n        {scrollContainer}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withIdentity(injectIntl(Notifications)));\n"],"sourceRoot":""}