{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/firehose/index.jsx"],"names":["messages","defineMessages","title","id","defaultMessage","ColumnSettings","dispatch","useAppDispatch","settings","useAppSelector","state","getIn","onChange","useCallback","key","checked","changeSetting","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","Firehose","_ref","feedType","multiColumn","intl","useIntl","signedIn","useIdentity","columnRef","useRef","onlyMedia","hasUnread","concat","handlePin","addColumn","other","onlyRemote","handleLoadMore","maxId","expandCommunityTimeline","expandPublicTimeline","handleHeaderClick","_columnRef$current","current","scrollTop","useEffect","disconnect","connectCommunityStream","connectPublicStream","_disconnect","prependBanner","DismissableBanner","values","domain","emptyMessage","_jsxs","Column","bindToDocument","ref","formatMessage","children","ColumnHeader","icon","iconComponent","PublicIcon","active","onPin","onClick","NavLink","exact","to","tagName","StatusListContainer","prepend","timelineId","onLoadMore","trackScroll","scrollKey","Helmet","name","content"],"mappings":"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","file":"js/features/firehose.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { NavLink } from 'react-router-dom';\n\nimport { useIdentity } from '@/mastodon/identity_context';\nimport PublicIcon from '@/material-icons/400-24px/public.svg?react';\nimport { addColumn } from 'mastodon/actions/columns';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { connectPublicStream, connectCommunityStream } from 'mastodon/actions/streaming';\nimport { expandPublicTimeline, expandCommunityTimeline } from 'mastodon/actions/timelines';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { domain } from 'mastodon/initial_state';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport SettingToggle from '../notifications/components/setting_toggle';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.firehose', defaultMessage: 'Live feeds' },\n});\n\nconst ColumnSettings = () => {\n  const dispatch = useAppDispatch();\n  const settings = useAppSelector((state) => state.getIn(['settings', 'firehose']));\n  const onChange = useCallback(\n    (key, checked) => dispatch(changeSetting(['firehose', ...key], checked)),\n    [dispatch],\n  );\n\n  return (\n    <div className='column-settings'>\n      <section>\n        <div className='column-settings__row'>\n          <SettingToggle\n            settings={settings}\n            settingPath={['onlyMedia']}\n            onChange={onChange}\n            label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nconst Firehose = ({ feedType, multiColumn }) => {\n  const dispatch = useAppDispatch();\n  const intl = useIntl();\n  const { signedIn } = useIdentity();\n  const columnRef = useRef(null);\n\n  const onlyMedia = useAppSelector((state) => state.getIn(['settings', 'firehose', 'onlyMedia'], false));\n  const hasUnread = useAppSelector((state) => state.getIn(['timelines', `${feedType}${onlyMedia ? ':media' : ''}`, 'unread'], 0) > 0);\n\n  const handlePin = useCallback(\n    () => {\n      switch(feedType) {\n      case 'community':\n        dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n        break;\n      case 'public':\n        dispatch(addColumn('PUBLIC', { other: { onlyMedia } }));\n        break;\n      case 'public:remote':\n        dispatch(addColumn('REMOTE', { other: { onlyMedia, onlyRemote: true } }));\n        break;\n      }\n    },\n    [dispatch, onlyMedia, feedType],\n  );\n\n  const handleLoadMore = useCallback(\n    (maxId) => {\n      switch(feedType) {\n      case 'community':\n        dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n        break;\n      case 'public':\n        dispatch(expandPublicTimeline({ maxId, onlyMedia }));\n        break;\n      case 'public:remote':\n        dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote: true }));\n        break;\n      }\n    },\n    [dispatch, onlyMedia, feedType],\n  );\n\n  const handleHeaderClick = useCallback(() => columnRef.current?.scrollTop(), []);\n\n  useEffect(() => {\n    let disconnect;\n\n    switch(feedType) {\n    case 'community':\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n      if (signedIn) {\n        disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n      break;\n    case 'public':\n      dispatch(expandPublicTimeline({ onlyMedia }));\n      if (signedIn) {\n        disconnect = dispatch(connectPublicStream({ onlyMedia }));\n      }\n      break;\n    case 'public:remote':\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote: true }));\n      if (signedIn) {\n        disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote: true }));\n      }\n      break;\n    }\n\n    return () => disconnect?.();\n  }, [dispatch, signedIn, feedType, onlyMedia]);\n\n  const prependBanner = feedType === 'community' ? (\n    <DismissableBanner id='community_timeline'>\n      <FormattedMessage\n        id='dismissable_banner.community_timeline'\n        defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.'\n        values={{ domain }}\n      />\n    </DismissableBanner>\n  ) : (\n    <DismissableBanner id='public_timeline'>\n      <FormattedMessage\n        id='dismissable_banner.public_timeline'\n        defaultMessage='These are the most recent public posts from people on the social web that people on {domain} follow.'\n        values={{ domain }}\n      />\n    </DismissableBanner>\n  );\n\n  const emptyMessage = feedType === 'community' ? (\n    <FormattedMessage\n      id='empty_column.community'\n      defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!'\n    />\n  ) : (\n    <FormattedMessage\n      id='empty_column.public'\n      defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up'\n    />\n  );\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='globe'\n        iconComponent={PublicIcon}\n        active={hasUnread}\n        title={intl.formatMessage(messages.title)}\n        onPin={handlePin}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n      >\n        <ColumnSettings />\n      </ColumnHeader>\n\n      <div className='account__section-headline'>\n        <NavLink exact to='/public/local'>\n          <FormattedMessage tagName='div' id='firehose.local' defaultMessage='This server' />\n        </NavLink>\n\n        <NavLink exact to='/public/remote'>\n          <FormattedMessage tagName='div' id='firehose.remote' defaultMessage='Other servers' />\n        </NavLink>\n\n        <NavLink exact to='/public'>\n          <FormattedMessage tagName='div' id='firehose.all' defaultMessage='All' />\n        </NavLink>\n      </div>\n\n      <StatusListContainer\n        prepend={prependBanner}\n        timelineId={`${feedType}${onlyMedia ? ':media' : ''}`}\n        onLoadMore={handleLoadMore}\n        trackScroll\n        scrollKey='firehose'\n        emptyMessage={emptyMessage}\n        bindToDocument={!multiColumn}\n      />\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nFirehose.propTypes = {\n  multiColumn: PropTypes.bool,\n  feedType: PropTypes.string,\n};\n\nexport default Firehose;\n"],"sourceRoot":""}