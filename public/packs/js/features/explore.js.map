{"version":3,"sources":["webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/components/story.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/links.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/results.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/statuses.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/components/card.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/suggestions.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/tags.jsx","webpack:///app/javascript/var/home/testeraphy/Documents/Chuckya-fe-standalone/app/javascript/mastodon/features/explore/index.jsx"],"names":["sharesCountRenderer","displayNumber","pluralReady","_jsx","FormattedMessage","id","defaultMessage","values","count","counter","Story","_ref","url","title","lang","publisher","publishedAt","author","authorAccount","sharedTimes","thumbnail","thumbnailDescription","blurhash","expanded","thumbnailLoaded","setThumbnailLoaded","useState","handleImageLoad","useCallback","className","classNames","Skeleton","width","_jsxs","_Fragment","children","RelativeTimestamp","timestamp","href","target","rel","name","AuthorLink","accountId","Link","to","concat","encodeURIComponent","ShortNumber","value","renderer","Blurhash","hash","src","onLoad","alt","Links","PureComponent","componentDidMount","dispatch","links","history","this","props","action","size","fetchTrendingLinks","render","isLoading","banner","DismissableBanner","isEmpty","LoadingIndicator","map","link","i","get","getIn","connect","state","withRouter","messages","defineMessages","hidePeek","list","skipLast","Results","constructor","arguments","_defineProperty","type","submittedType","submitSearch","setState","_loadMore","getDerivedStateFromProps","expandSearch","intl","q","results","hasMore","ImmutableList","filteredResults","accounts","hashtags","statuses","SearchSection","Icon","icon","PeopleIcon","onClickMore","handleLoadMoreAccounts","take","Account","TagIcon","handleLoadMoreHashtags","hashtag","Hashtag","FindInPageIcon","handleLoadMoreStatuses","Status","renderAccounts","renderHashtags","renderStatuses","onClick","handleSelectAll","undefined","handleSelectAccounts","handleSelectHashtags","handleSelectStatuses","ScrollableList","scrollKey","onLoadMore","handleLoadMore","emptyMessage","bindToDocument","Helmet","formatMessage","injectIntl","Statuses","_debounce","expandTrendingStatuses","leading","statusIds","fetchTrendingStatuses","multiColumn","StatusList","trackScroll","prepend","alwaysPrepend","timelineId","withCounters","getStatusList","dismiss","Card","source","useIntl","account","useSelector","useDispatch","handleDismiss","dismissSuggestion","label","domain","Avatar","DisplayName","IconButton","iconComponent","CloseIcon","FollowButton","Suggestions","suggestions","fetchSuggestions","suggestion","Tags","fetchTrendingHashtags","isLoadingHashtags","searchResults","Explore","column","scrollTop","c","isSearching","signedIn","identity","Column","ref","setRef","ColumnHeader","SearchIcon","ExploreIcon","handleHeaderClick","Search","SearchResults","NavLink","exact","tagName","Switch","Route","path","component","content","withIdentity","layout","trendsEnabled"],"mappings":"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","file":"js/features/explore.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\n\n\nimport { Blurhash } from 'mastodon/components/blurhash';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { Skeleton } from 'mastodon/components/skeleton';\n\nimport { AuthorLink } from './author_link';\n\nconst sharesCountRenderer = (displayNumber, pluralReady) => (\n  <FormattedMessage\n    id='link_preview.shares'\n    defaultMessage='{count, plural, one {{counter} post} other {{counter} posts}}'\n    values={{\n      count: pluralReady,\n      counter: <strong>{displayNumber}</strong>,\n    }}\n  />\n);\n\nexport const Story = ({\n  url,\n  title,\n  lang,\n  publisher,\n  publishedAt,\n  author,\n  authorAccount,\n  sharedTimes,\n  thumbnail,\n  thumbnailDescription,\n  blurhash,\n  expanded\n}) => {\n  const [thumbnailLoaded, setThumbnailLoaded] = useState(false);\n\n  const handleImageLoad = useCallback(() => {\n    setThumbnailLoaded(true);\n  }, [setThumbnailLoaded]);\n\n  return (\n    <div className={classNames('story', { expanded })}>\n      <div className='story__details'>\n        <div className='story__details__publisher'>\n          {publisher ? <span lang={lang}>{publisher}</span> : <Skeleton width={50} />}{publishedAt && <> · <RelativeTimestamp timestamp={publishedAt} /></>}\n        </div>\n\n        <a className='story__details__title' lang={lang} href={url} target='blank' rel='noopener'>\n          {title ? title : <Skeleton />}\n        </a>\n\n        <div className='story__details__shared'>\n          {author ? <FormattedMessage id='link_preview.author' className='story__details__shared__author' defaultMessage='By {name}' values={{ name: authorAccount ? <AuthorLink accountId={authorAccount} /> : <strong>{author}</strong> }} /> : <span />}\n          {typeof sharedTimes === 'number' ? <Link className='story__details__shared__pill' to={`/links/${encodeURIComponent(url)}`}><ShortNumber value={sharedTimes} renderer={sharesCountRenderer} /></Link> : <Skeleton width='10ch' />}\n        </div>\n      </div>\n\n      <a className='story__thumbnail' href={url} target='blank' rel='noopener'>\n        {thumbnail ? (\n          <>\n            <div className={classNames('story__thumbnail__preview', { 'story__thumbnail__preview--hidden': thumbnailLoaded })}><Blurhash hash={blurhash} /></div>\n            <img src={thumbnail} onLoad={handleImageLoad} alt={thumbnailDescription} title={thumbnailDescription} lang={lang} />\n          </>\n        ) : <Skeleton />}\n      </a>\n    </div>\n  );\n};\n\nStory.propTypes = {\n  url: PropTypes.string,\n  title: PropTypes.string,\n  lang: PropTypes.string,\n  publisher: PropTypes.string,\n  publishedAt: PropTypes.string,\n  author: PropTypes.string,\n  authorAccount: PropTypes.string,\n  sharedTimes: PropTypes.number,\n  thumbnail: PropTypes.string,\n  thumbnailDescription: PropTypes.string,\n  blurhash: PropTypes.string,\n  expanded: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchTrendingLinks } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nimport { Story } from './components/story';\n\nconst mapStateToProps = state => ({\n  links: state.getIn(['trends', 'links', 'items']),\n  isLoading: state.getIn(['trends', 'links', 'isLoading']),\n});\n\nclass Links extends PureComponent {\n\n  static propTypes = {\n    links: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, links, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && links.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingLinks());\n  }\n\n  render () {\n    const { isLoading, links } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/links'>\n        <FormattedMessage id='dismissable_banner.explore_links' defaultMessage='These are news stories being shared the most on the social web today. Newer news stories posted by more different people are ranked higher.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && links.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__links scrollable' data-nosnippet>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : links.map((link, i) => (\n          <Story\n            key={link.get('id')}\n            expanded={i === 0}\n            lang={link.get('language')}\n            url={link.get('url')}\n            title={link.get('title')}\n            publisher={link.get('provider_name')}\n            publishedAt={link.get('published_at')}\n            author={link.get('author_name')}\n            authorAccount={link.getIn(['authors', 0, 'account', 'id'])}\n            sharedTimes={link.getIn(['history', 0, 'accounts']) * 1 + link.getIn(['history', 1, 'accounts']) * 1}\n            thumbnail={link.get('image')}\n            thumbnailDescription={link.get('image_description')}\n            blurhash={link.get('blurhash')}\n          />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Links));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport FindInPageIcon from '@/material-icons/400-24px/find_in_page.svg?react';\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport TagIcon from '@/material-icons/400-24px/tag.svg?react';\nimport { submitSearch, expandSearch } from 'mastodon/actions/search';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { Icon } from 'mastodon/components/icon';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport Account from 'mastodon/containers/account_container';\nimport Status from 'mastodon/containers/status_container';\n\nimport { SearchSection } from './components/search_section';\n\nconst messages = defineMessages({\n  title: { id: 'search_results.title', defaultMessage: 'Search for {q}' },\n});\n\nconst mapStateToProps = state => ({\n  isLoading: state.getIn(['search', 'isLoading']),\n  results: state.getIn(['search', 'results']),\n  q: state.getIn(['search', 'searchTerm']),\n  submittedType: state.getIn(['search', 'type']),\n});\n\nconst INITIAL_PAGE_LIMIT = 10;\nconst INITIAL_DISPLAY = 4;\n\nconst hidePeek = list => {\n  if (list.size > INITIAL_PAGE_LIMIT && list.size % INITIAL_PAGE_LIMIT === 1) {\n    return list.skipLast(1);\n  } else {\n    return list;\n  }\n};\n\nconst renderAccounts = accounts => hidePeek(accounts).map(id => (\n  <Account key={id} id={id} />\n));\n\nconst renderHashtags = hashtags => hidePeek(hashtags).map(hashtag => (\n  <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n));\n\nconst renderStatuses = statuses => hidePeek(statuses).map(id => (\n  <Status key={id} id={id} />\n));\n\nclass Results extends PureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.contains({\n      accounts: ImmutablePropTypes.orderedSet,\n      statuses: ImmutablePropTypes.orderedSet,\n      hashtags: ImmutablePropTypes.orderedSet,\n    }),\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    q: PropTypes.string,\n    intl: PropTypes.object,\n    submittedType: PropTypes.oneOf(['accounts', 'statuses', 'hashtags']),\n  };\n\n  state = {\n    type: this.props.submittedType || 'all',\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.submittedType !== state.type) {\n      return {\n        type: props.submittedType || 'all',\n      };\n    }\n\n    return null;\n  }\n\n  handleSelectAll = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for a specific type, we need to resubmit\n    // the query to get all types of results\n    if (submittedType) {\n      dispatch(submitSearch());\n    }\n\n    this.setState({ type: 'all' });\n  };\n\n  handleSelectAccounts = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'accounts') {\n      dispatch(submitSearch('accounts'));\n    }\n\n    this.setState({ type: 'accounts' });\n  };\n\n  handleSelectHashtags = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'hashtags') {\n      dispatch(submitSearch('hashtags'));\n    }\n\n    this.setState({ type: 'hashtags' });\n  };\n\n  handleSelectStatuses = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'statuses') {\n      dispatch(submitSearch('statuses'));\n    }\n\n    this.setState({ type: 'statuses' });\n  };\n\n  handleLoadMoreAccounts = () => this._loadMore('accounts');\n  handleLoadMoreStatuses = () => this._loadMore('statuses');\n  handleLoadMoreHashtags = () => this._loadMore('hashtags');\n\n  _loadMore (type) {\n    const { dispatch } = this.props;\n    dispatch(expandSearch(type));\n  }\n\n  handleLoadMore = () => {\n    const { type } = this.state;\n\n    if (type !== 'all') {\n      this._loadMore(type);\n    }\n  };\n\n  render () {\n    const { intl, isLoading, q, results } = this.props;\n    const { type } = this.state;\n\n    // We request 1 more result than we display so we can tell if there'd be a next page\n    const hasMore = type !== 'all' ? results.get(type, ImmutableList()).size > INITIAL_PAGE_LIMIT && results.get(type).size % INITIAL_PAGE_LIMIT === 1 : false;\n\n    let filteredResults;\n\n    const accounts = results.get('accounts', ImmutableList());\n    const hashtags = results.get('hashtags', ImmutableList());\n    const statuses = results.get('statuses', ImmutableList());\n\n    switch(type) {\n    case 'all':\n      filteredResults = (accounts.size + hashtags.size + statuses.size) > 0 ? (\n        <>\n          {accounts.size > 0 && (\n            <SearchSection key='accounts' title={<><Icon id='users' icon={PeopleIcon} /><FormattedMessage id='search_results.accounts' defaultMessage='Profiles' /></>} onClickMore={this.handleLoadMoreAccounts}>\n              {accounts.take(INITIAL_DISPLAY).map(id => <Account key={id} id={id} />)}\n            </SearchSection>\n          )}\n\n          {hashtags.size > 0 && (\n            <SearchSection key='hashtags' title={<><Icon id='hashtag' icon={TagIcon} /><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></>} onClickMore={this.handleLoadMoreHashtags}>\n              {hashtags.take(INITIAL_DISPLAY).map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n            </SearchSection>\n          )}\n\n          {statuses.size > 0 && (\n            <SearchSection key='statuses' title={<><Icon id='quote-right' icon={FindInPageIcon} /><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></>} onClickMore={this.handleLoadMoreStatuses}>\n              {statuses.take(INITIAL_DISPLAY).map(id => <Status key={id} id={id} />)}\n            </SearchSection>\n          )}\n        </>\n      ) : [];\n      break;\n    case 'accounts':\n      filteredResults = renderAccounts(accounts);\n      break;\n    case 'hashtags':\n      filteredResults = renderHashtags(hashtags);\n      break;\n    case 'statuses':\n      filteredResults = renderStatuses(statuses);\n      break;\n    }\n\n    return (\n      <>\n        <div className='account__section-headline'>\n          <button onClick={this.handleSelectAll} className={type === 'all' ? 'active' : undefined}><FormattedMessage id='search_results.all' defaultMessage='All' /></button>\n          <button onClick={this.handleSelectAccounts} className={type === 'accounts' ? 'active' : undefined}><FormattedMessage id='search_results.accounts' defaultMessage='Profiles' /></button>\n          <button onClick={this.handleSelectHashtags} className={type === 'hashtags' ? 'active' : undefined}><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></button>\n          <button onClick={this.handleSelectStatuses} className={type === 'statuses' ? 'active' : undefined}><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></button>\n        </div>\n\n        <div className='explore__search-results' data-nosnippet>\n          <ScrollableList\n            scrollKey='search-results'\n            isLoading={isLoading}\n            onLoadMore={this.handleLoadMore}\n            hasMore={hasMore}\n            emptyMessage={<FormattedMessage id='search_results.nothing_found' defaultMessage='Could not find anything for these search terms' />}\n            bindToDocument\n          >\n            {filteredResults}\n          </ScrollableList>\n        </div>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title, { q })}</title>\n        </Helmet>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Results));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\n\nimport { fetchTrendingStatuses, expandTrendingStatuses } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport StatusList from 'mastodon/components/status_list';\nimport { getStatusList } from 'mastodon/selectors';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  statusIds: getStatusList(state, 'trending'),\n  isLoading: state.getIn(['status_lists', 'trending', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'trending', 'next']),\n});\n\nclass Statuses extends PureComponent {\n\n  static propTypes = {\n    statusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, statusIds, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && statusIds.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingStatuses());\n  }\n\n  handleLoadMore = debounce(() => {\n    const { dispatch } = this.props;\n    dispatch(expandTrendingStatuses());\n  }, 300, { leading: true });\n\n  render () {\n    const { isLoading, hasMore, statusIds, multiColumn } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />;\n\n    return (\n      <StatusList\n        trackScroll\n        prepend={<DismissableBanner id='explore/statuses'><FormattedMessage id='dismissable_banner.explore_statuses' defaultMessage='These are posts from across the social web that are gaining traction today. Newer posts with more boosts and favorites are ranked higher.' /></DismissableBanner>}\n        alwaysPrepend\n        timelineId='explore'\n        statusIds={statusIds}\n        scrollKey='explore-statuses'\n        hasMore={hasMore}\n        isLoading={isLoading}\n        onLoadMore={this.handleLoadMore}\n        emptyMessage={emptyMessage}\n        bindToDocument={!multiColumn}\n        withCounters\n      />\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Statuses));\n","import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\n\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { dismissSuggestion } from 'mastodon/actions/suggestions';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport { FollowButton } from 'mastodon/components/follow_button';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport { domain } from 'mastodon/initial_state';\n\nconst messages = defineMessages({\n  dismiss: { id: 'follow_suggestions.dismiss', defaultMessage: \"Don't show again\" },\n});\n\nexport const Card = ({ id, source }) => {\n  const intl = useIntl();\n  const account = useSelector(state => state.getIn(['accounts', id]));\n  const dispatch = useDispatch();\n\n  const handleDismiss = useCallback(() => {\n    dispatch(dismissSuggestion(id));\n  }, [id, dispatch]);\n\n  let label;\n\n  switch (source) {\n  case 'friends_of_friends':\n    label = <FormattedMessage id='follow_suggestions.friends_of_friends_longer' defaultMessage='Popular among people you follow' />;\n    break;\n  case 'similar_to_recently_followed':\n    label = <FormattedMessage id='follow_suggestions.similar_to_recently_followed_longer' defaultMessage='Similar to profiles you recently followed' />;\n    break;\n  case 'featured':\n    label = <FormattedMessage id='follow_suggestions.featured_longer' defaultMessage='Hand-picked by the {domain} team' values={{ domain }} />;\n    break;\n  case 'most_followed':\n    label = <FormattedMessage id='follow_suggestions.popular_suggestion_longer' defaultMessage='Popular on {domain}' values={{ domain }} />;\n    break;\n  case 'most_interactions':\n    label = <FormattedMessage id='follow_suggestions.popular_suggestion_longer' defaultMessage='Popular on {domain}' values={{ domain }} />;\n    break;\n  }\n\n  return (\n    <div className='explore__suggestions__card'>\n      <div className='explore__suggestions__card__source'>\n        {label}\n      </div>\n\n      <div className='explore__suggestions__card__body'>\n        <Link to={`/@${account.get('acct')}`}><Avatar account={account} size={48} /></Link>\n\n        <div className='explore__suggestions__card__body__main'>\n          <div className='explore__suggestions__card__body__main__name-button'>\n            <Link className='explore__suggestions__card__body__main__name-button__name' to={`/@${account.get('acct')}`}><DisplayName account={account} /></Link>\n            <IconButton iconComponent={CloseIcon} onClick={handleDismiss} title={intl.formatMessage(messages.dismiss)} />\n            <FollowButton accountId={account.get('id')} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  source: PropTypes.oneOf(['friends_of_friends', 'similar_to_recently_followed', 'featured', 'most_followed', 'most_interactions']),\n};\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nimport { Card } from './components/card';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nclass Suggestions extends PureComponent {\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    suggestions: ImmutablePropTypes.list,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && suggestions.size > 0) {\n      return;\n    }\n\n    dispatch(fetchSuggestions(true));\n  }\n\n  render () {\n    const { isLoading, suggestions } = this.props;\n\n    if (!isLoading && suggestions.isEmpty()) {\n      return (\n        <div className='explore__suggestions scrollable scrollable--flex'>\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__suggestions scrollable' data-nosnippet>\n        {isLoading ? <LoadingIndicator /> : suggestions.map(suggestion => (\n          <Card\n            key={suggestion.get('account')}\n            id={suggestion.get('account')}\n            source={suggestion.getIn(['sources', 0])}\n          />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Suggestions));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  hashtags: state.getIn(['trends', 'tags', 'items']),\n  isLoadingHashtags: state.getIn(['trends', 'tags', 'isLoading']),\n});\n\nclass Tags extends PureComponent {\n\n  static propTypes = {\n    hashtags: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, history, hashtags } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && hashtags.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingHashtags());\n  }\n\n  render () {\n    const { isLoading, hashtags } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/tags'>\n        <FormattedMessage id='dismissable_banner.explore_tags' defaultMessage='These are hashtags that are gaining traction on the social web today. Hashtags that are used by more different people are ranked higher.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && hashtags.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='scrollable explore__links' data-nosnippet>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : hashtags.map(hashtag => (\n          <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Tags));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { NavLink, Switch, Route } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport ExploreIcon from '@/material-icons/400-24px/explore.svg?react';\nimport SearchIcon from '@/material-icons/400-24px/search.svg?react';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport Search from 'mastodon/features/compose/containers/search_container';\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\nimport { trendsEnabled } from 'mastodon/initial_state';\n\nimport Links from './links';\nimport SearchResults from './results';\nimport Statuses from './statuses';\nimport Suggestions from './suggestions';\nimport Tags from './tags';\n\nconst messages = defineMessages({\n  title: { id: 'explore.title', defaultMessage: 'Explore' },\n  searchResults: { id: 'explore.search_results', defaultMessage: 'Search results' },\n});\n\nconst mapStateToProps = state => ({\n  layout: state.getIn(['meta', 'layout']),\n  isSearching: state.getIn(['search', 'submitted']) || !trendsEnabled,\n});\n\nclass Explore extends PureComponent {\n  static propTypes = {\n    identity: identityContextPropShape,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    isSearching: PropTypes.bool,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  render() {\n    const { intl, multiColumn, isSearching } = this.props;\n    const { signedIn } = this.props.identity;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon={isSearching ? 'search' : 'explore'}\n          iconComponent={isSearching ? SearchIcon : ExploreIcon}\n          title={intl.formatMessage(isSearching ? messages.searchResults : messages.title)}\n          onClick={this.handleHeaderClick}\n          multiColumn={multiColumn}\n        />\n\n        <div className='explore__search-header'>\n          <Search />\n        </div>\n\n        {isSearching ? (\n          <SearchResults />\n        ) : (\n          <>\n            <div className='account__section-headline'>\n              <NavLink exact to='/explore'>\n                <FormattedMessage tagName='div' id='explore.trending_statuses' defaultMessage='Posts' />\n              </NavLink>\n\n              <NavLink exact to='/explore/tags'>\n                <FormattedMessage tagName='div' id='explore.trending_tags' defaultMessage='Hashtags' />\n              </NavLink>\n\n              {signedIn && (\n                <NavLink exact to='/explore/suggestions'>\n                  <FormattedMessage tagName='div' id='explore.suggested_follows' defaultMessage='People' />\n                </NavLink>\n              )}\n\n              <NavLink exact to='/explore/links'>\n                <FormattedMessage tagName='div' id='explore.trending_links' defaultMessage='News' />\n              </NavLink>\n            </div>\n\n            <Switch>\n              <Route path='/explore/tags' component={Tags} />\n              <Route path='/explore/links' component={Links} />\n              <Route path='/explore/suggestions' component={Suggestions} />\n              <Route exact path={['/explore', '/explore/posts', '/search']}>\n                <Statuses multiColumn={multiColumn} />\n              </Route>\n            </Switch>\n\n            <Helmet>\n              <title>{intl.formatMessage(messages.title)}</title>\n              <meta name='robots' content={isSearching ? 'noindex' : 'all'} />\n            </Helmet>\n          </>\n        )}\n      </Column>\n    );\n  }\n\n}\n\nexport default withIdentity(connect(mapStateToProps)(injectIntl(Explore)));\n"],"sourceRoot":""}